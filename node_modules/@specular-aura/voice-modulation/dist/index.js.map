{"version":3,"file":"index.js","mappings":"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","sources":["../webpack/universalModuleDefinition","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js","../node_modules/tunajs/tuna.js","../external umd \"react\"","../webpack/bootstrap","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","components/helpers/audioBufferToWaveBlob.js","components/modulations/alien1.js","components/modulations/alien2.js","components/modulations/alienRobot1.js","components/helpers/jungle.js","components/modulations/bane.js","components/helpers/waveWorker.js","components/modulations/chunkedReversed.js","components/modulations/church.js","components/modulations/cymbal.js","components/helpers/vocoder.js","components/modulations/deepSynth.js","components/modulations/distopianPASystem.js","components/modulations/evilRobot.js","components/modulations/jumbledUp.js","components/modulations/megaphone.js","components/modulations/mosquito.js","components/modulations/oldRadio.js","components/modulations/phaser.js","components/modulations/pitch.js","components/modulations/poorTelephoneTransmission.js","components/modulations/portableRadio.js","components/modulations/radioTuning.js","components/modulations/reverseReverb.js","components/modulations/ringModulator.js","components/modulations/vibrato.js","components/modulations/ModulationMap.js","components/modulations/robot1.js","components/modulations/robot2.js","components/modulations/robot3.js","components/modulations/satan.js","components/modulations/sauron.js","components/modulations/slowWobble.js","components/modulations/speed.js","components/modulations/synth.js","components/modulations/telephone.js","components/modulations/tinyRobot.js","components/modulations/troll.js","components/modulations/underwater.js","components/VoiceModulation.js","components/modulations/VoiceModulationList.js","index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"react\")) : factory(root[\"react\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__156__) => {\nreturn ","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/*\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n    is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n/*global module*/\n(function() {\n\n    var userContext,\n        userInstance,\n        pipe = function(param, val) {\n            param.value = val;\n        },\n        Super = Object.create(null, {\n            activate: {\n                writable: true,\n                value: function(doActivate) {\n                    if (doActivate) {\n                        this.input.disconnect();\n                        this.input.connect(this.activateNode);\n                        if (this.activateCallback) {\n                            this.activateCallback(doActivate);\n                        }\n                    } else {\n                        this.input.disconnect();\n                        this.input.connect(this.output);\n                    }\n                }\n            },\n            bypass: {\n                get: function() {\n                    return this._bypass;\n                },\n                set: function(value) {\n                    if (this._lastBypassValue === value) {\n                        return;\n                    }\n                    this._bypass = value;\n                    this.activate(!value);\n                    this._lastBypassValue = value;\n                }\n            },\n            connect: {\n                value: function(target) {\n                    this.output.connect(target);\n                }\n            },\n            disconnect: {\n                value: function(target) {\n                    this.output.disconnect(target);\n                }\n            },\n            connectInOrder: {\n                value: function(nodeArray) {\n                    var i = nodeArray.length - 1;\n                    while (i--) {\n                        if (!nodeArray[i].connect) {\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\n                        }\n                        if (nodeArray[i + 1].input) {\n                            nodeArray[i].connect(nodeArray[i + 1].input);\n                        } else {\n                            nodeArray[i].connect(nodeArray[i + 1]);\n                        }\n                    }\n                }\n            },\n            getDefaults: {\n                value: function() {\n                    var result = {};\n                    for (var key in this.defaults) {\n                        result[key] = this.defaults[key].value;\n                    }\n                    return result;\n                }\n            },\n            automate: {\n                value: function(property, value, duration, startTime) {\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\n                        dur = duration ? ~~(duration / 1000) : 0,\n                        _is = this.defaults[property],\n                        param = this[property],\n                        method;\n\n                    if (param) {\n                        if (_is.automatable) {\n                            if (!duration) {\n                                method = \"setValueAtTime\";\n                            } else {\n                                method = \"linearRampToValueAtTime\";\n                                param.cancelScheduledValues(start);\n                                param.setValueAtTime(param.value, start);\n                            }\n                            param[method](value, dur + start);\n                        } else {\n                            param = value;\n                        }\n                    } else {\n                        console.error(\"Invalid Property for \" + this.name);\n                    }\n                }\n            }\n        }),\n        FLOAT = \"float\",\n        BOOLEAN = \"boolean\",\n        STRING = \"string\",\n        INT = \"int\";\n\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = Tuna;\n    } else if (typeof define === \"function\") {\n        window.define(\"Tuna\", definition);\n    } else {\n        window.Tuna = Tuna;\n    }\n\n    function definition() {\n        return Tuna;\n    }\n\n    function Tuna(context) {\n        if (!(this instanceof Tuna)) {\n            return new Tuna(context);\n        }\n\n        var _window = typeof window === \"undefined\" ? {} : window;\n\n        if (!_window.AudioContext) {\n            _window.AudioContext = _window.webkitAudioContext;\n        }\n        if (!context) {\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\n            context = _window.AudioContext && (new _window.AudioContext());\n        }\n        if (!context) {\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\n        }\n        connectify(context);\n        userContext = context;\n        userInstance = this;\n    }\n\n    function connectify(context) {\n        if (context.__connectified__ === true) return;\n\n        var gain = context.createGain(),\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\n            oconnect = proto.connect;\n\n        proto.connect = shimConnect;\n        context.__connectified__ = true; // Prevent overriding connect more than once\n\n        function shimConnect() {\n            var node = arguments[0];\n            arguments[0] = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\n            oconnect.apply(this, arguments);\n            return node;\n        }\n    }\n\n    function dbToWAVolume(db) {\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\n    }\n\n    function fmod(x, y) {\n        // http://kevin.vanzonneveld.net\n        // *     example 1: fmod(5.7, 1.3);\n        // *     returns 1: 0.5\n        var tmp, tmp2, p = 0,\n            pY = 0,\n            l = 0.0,\n            l2 = 0.0;\n\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\n        if (pY > p) {\n            p = pY;\n        }\n\n        tmp2 = (x % y);\n\n        if (p < -100 || p > 20) {\n            // toFixed will give an out of bound error so we fix it like this:\n            l = Math.round(Math.log(tmp2) / Math.log(10));\n            l2 = Math.pow(10, l);\n\n            return (tmp2 / l2).toFixed(l - p) * l2;\n        } else {\n            return parseFloat(tmp2.toFixed(-p));\n        }\n    }\n\n    function sign(x) {\n        if (x === 0) {\n            return 1;\n        } else {\n            return Math.abs(x) / x;\n        }\n    }\n\n    function tanh(n) {\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\n    }\n\n    function initValue(userVal, defaultVal) {\n        return userVal === undefined ? defaultVal : userVal;\n    }\n\n    Tuna.prototype.Bitcrusher = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var phaser = 0,\n            last = 0,\n            input, output, step, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n            output = e.outputBuffer.getChannelData(0),\n            step = Math.pow(1 / 2, this.bits);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                phaser += this.normfreq;\n                if (phaser >= 1.0) {\n                    phaser -= 1.0;\n                    last = step * Math.floor(input[i] / step + 0.5);\n                }\n                output[i] = last;\n            }\n        };\n\n        this.bits = properties.bits || this.defaults.bits.value;\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\n        name: {\n            value: \"Bitcrusher\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bits: {\n                    value: 4,\n                    min: 1,\n                    max: 16,\n                    automatable: false,\n                    type: INT\n                },\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                normfreq: {\n                    value: 0.1,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        bits: {\n            enumerable: true,\n            get: function() {\n                return this.processor.bits;\n            },\n            set: function(value) {\n                this.processor.bits = value;\n            }\n        },\n        normfreq: {\n            enumerable: true,\n            get: function() {\n                return this.processor.normfreq;\n            },\n            set: function(value) {\n                this.processor.normfreq = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Cabinet = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = this.newConvolver(properties.impulsePath || \"../impulses/impulse_guitar.wav\");\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.convolver.input);\n        this.convolver.output.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n        //don't use makeupGain setter at init to avoid smoothing\n        this.makeupNode.gain.value = initValue(properties.makeupGain, this.defaults.makeupGain.value);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\n        name: {\n            value: \"Cabinet\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                makeupGain: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        newConvolver: {\n            value: function(impulsePath) {\n                return new userInstance.Convolver({\n                    impulse: impulsePath,\n                    dryLevel: 0,\n                    wetLevel: 1\n                });\n            }\n        }\n    });\n\n    Tuna.prototype.Chorus = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.attenuator = this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.delayL = userContext.createDelay();\n        this.delayR = userContext.createDelay();\n        this.feedbackGainNodeLR = userContext.createGain();\n        this.feedbackGainNodeRL = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.output = userContext.createGain();\n\n        this.lfoL = new userInstance.LFO({\n            target: this.delayL.delayTime,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.delayR.delayTime,\n            callback: pipe\n        });\n\n        this.input.connect(this.attenuator);\n        this.attenuator.connect(this.output);\n        this.attenuator.connect(this.splitter);\n        this.splitter.connect(this.delayL, 0);\n        this.splitter.connect(this.delayR, 1);\n        this.delayL.connect(this.feedbackGainNodeLR);\n        this.delayR.connect(this.feedbackGainNodeRL);\n        this.feedbackGainNodeLR.connect(this.delayR);\n        this.feedbackGainNodeRL.connect(this.delayL);\n        this.delayL.connect(this.merger, 0, 0);\n        this.delayR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.lfoR.phase = Math.PI / 2;\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\n        name: {\n            value: \"Chorus\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                feedback: {\n                    value: 0.4,\n                    min: 0,\n                    max: 0.95,\n                    automatable: false,\n                    type: FLOAT\n                },\n                delay: {\n                    value: 0.0045,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 1.5,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        delay: {\n            enumerable: true,\n            get: function() {\n                return this._delay;\n            },\n            set: function(value) {\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\n                this.lfoL.offset = this._delay;\n                this.lfoR.offset = this._delay;\n                this._depth = this._depth;\n            }\n        },\n        depth: {\n            enumerable: true,\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._depth * this._delay;\n                this.lfoR.oscillation = this._depth * this._delay;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeLR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\n                this.feedbackGainNodeRL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        }\n    });\n\n    Tuna.prototype.Compressor = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.compNode.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.automakeup = initValue(properties.automakeup, this.defaults.automakeup.value);\n\n        //don't use makeupGain setter at initialization to avoid smoothing\n        if (this.automakeup) {\n            this.makeupNode.gain.value = dbToWAVolume(this.computeMakeup());\n        } else {\n            this.makeupNode.gain.value = dbToWAVolume(initValue(properties.makeupGain, this.defaults.makeupGain.value));\n        }\n        this.threshold = initValue(properties.threshold, this.defaults.threshold.value);\n        this.release = initValue(properties.release, this.defaults.release.value);\n        this.attack = initValue(properties.attack, this.defaults.attack.value);\n        this.ratio = properties.ratio || this.defaults.ratio.value;\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\n        name: {\n            value: \"Compressor\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                threshold: {\n                    value: -20,\n                    min: -60,\n                    max: 0,\n                    automatable: true,\n                    type: FLOAT\n                },\n                release: {\n                    value: 250,\n                    min: 10,\n                    max: 2000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                makeupGain: {\n                    value: 1,\n                    min: 1,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                attack: {\n                    value: 1,\n                    min: 0,\n                    max: 1000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                ratio: {\n                    value: 4,\n                    min: 1,\n                    max: 50,\n                    automatable: true,\n                    type: FLOAT\n                },\n                knee: {\n                    value: 5,\n                    min: 0,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                automakeup: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        computeMakeup: {\n            value: function() {\n                var magicCoefficient = 4, // raise me if the output is too hot\n                    c = this.compNode;\n                return -(c.threshold.value - c.threshold.value / c.ratio.value) / magicCoefficient;\n            }\n        },\n        automakeup: {\n            enumerable: true,\n            get: function() {\n                return this._automakeup;\n            },\n            set: function(value) {\n                this._automakeup = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        threshold: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.threshold;\n            },\n            set: function(value) {\n                this.compNode.threshold.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        ratio: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.ratio;\n            },\n            set: function(value) {\n                this.compNode.ratio.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        knee: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.knee;\n            },\n            set: function(value) {\n                this.compNode.knee.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        attack: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.attack;\n            },\n            set: function(value) {\n                this.compNode.attack.value = value / 1000;\n            }\n        },\n        release: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.release;\n            },\n            set: function(value) {\n                this.compNode.release.value = value / 1000;\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.setTargetAtTime(dbToWAVolume(value), userContext.currentTime, 0.01);\n            }\n        }\n    });\n\n    Tuna.prototype.Convolver = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = userContext.createConvolver();\n        this.dry = userContext.createGain();\n        this.filterLow = userContext.createBiquadFilter();\n        this.filterHigh = userContext.createBiquadFilter();\n        this.wet = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filterLow);\n        this.activateNode.connect(this.dry);\n        this.filterLow.connect(this.filterHigh);\n        this.filterHigh.connect(this.convolver);\n        this.convolver.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        //don't use setters at init to avoid smoothing\n        this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n        this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n        this.filterHigh.frequency.value = properties.highCut || this.defaults.highCut.value;\n        this.filterLow.frequency.value = properties.lowCut || this.defaults.lowCut.value;\n        this.output.gain.value = initValue(properties.level, this.defaults.level.value);\n        this.filterHigh.type = \"lowpass\";\n        this.filterLow.type = \"highpass\";\n        this.buffer = properties.impulse || \"../impulses/ir_rev_short.wav\";\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\n        name: {\n            value: \"Convolver\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                highCut: {\n                    value: 22050,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                lowCut: {\n                    value: 20,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                level: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        lowCut: {\n            get: function() {\n                return this.filterLow.frequency;\n            },\n            set: function(value) {\n                this.filterLow.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        highCut: {\n            get: function() {\n                return this.filterHigh.frequency;\n            },\n            set: function(value) {\n                this.filterHigh.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        level: {\n            get: function() {\n                return this.output.gain;\n            },\n            set: function(value) {\n                this.output.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        dryLevel: {\n            get: function() {\n                return this.dry.gain;\n            },\n            set: function(value) {\n                this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        wetLevel: {\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        buffer: {\n            enumerable: false,\n            get: function() {\n                return this.convolver.buffer;\n            },\n            set: function(impulse) {\n                var convolver = this.convolver,\n                    xhr = new XMLHttpRequest();\n                if (!impulse) {\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\n                    return;\n                }\n                xhr.open(\"GET\", impulse, true);\n                xhr.responseType = \"arraybuffer\";\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\n                                convolver.buffer = buffer;\n                            }, function(e) {\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\n                            });\n                        }\n                    }\n                };\n                xhr.send(null);\n            }\n        }\n    });\n\n    Tuna.prototype.Delay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.dry = userContext.createGain();\n        this.wet = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.delay = userContext.createDelay(10);\n        this.feedbackNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.delay);\n        this.activateNode.connect(this.dry);\n        this.delay.connect(this.filter);\n        this.filter.connect(this.feedbackNode);\n        this.feedbackNode.connect(this.delay);\n        this.feedbackNode.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\n        //don't use setters at init to avoid smoothing\n        this.feedbackNode.gain.value = initValue(properties.feedback, this.defaults.feedback.value);\n        this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n        this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n        this.filter.frequency.value = properties.cutoff || this.defaults.cutoff.value;\n        this.filter.type = \"lowpass\";\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\n        name: {\n            value: \"Delay\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTime: {\n                    value: 100,\n                    min: 20,\n                    max: 1000,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.45,\n                    min: 0,\n                    max: 0.9,\n                    automatable: true,\n                    type: FLOAT\n                },\n                cutoff: {\n                    value: 20000,\n                    min: 20,\n                    max: 20000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        delayTime: {\n            enumerable: true,\n            get: function() {\n                return this.delay.delayTime;\n            },\n            set: function(value) {\n                this.delay.delayTime.value = value / 1000;\n            }\n        },\n        wetLevel: {\n            enumerable: true,\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        dryLevel: {\n            enumerable: true,\n            get: function() {\n                return this.dry.gain;\n            },\n            set: function(value) {\n                this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this.feedbackNode.gain;\n            },\n            set: function(value) {\n                this.feedbackNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        }\n    });\n\n    Tuna.prototype.Filter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filter);\n        this.filter.connect(this.output);\n\n        //don't use setters for freq and gain at init to avoid smoothing\n        this.filter.frequency.value = properties.frequency || this.defaults.frequency.value;\n        this.Q = properties.resonance || this.defaults.Q.value;\n        this.filterType = initValue(properties.filterType, this.defaults.filterType.value);\n        this.filter.gain.value = initValue(properties.gain, this.defaults.gain.value);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\n        name: {\n            value: \"Filter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                frequency: {\n                    value: 800,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                Q: {\n                    value: 1,\n                    min: 0.001,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                gain: {\n                    value: 0,\n                    min: -40,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                filterType: {\n                    value: \"lowpass\",\n                    automatable: false,\n                    type: STRING\n                }\n            }\n        },\n        filterType: {\n            enumerable: true,\n            get: function() {\n                return this.filter.type;\n            },\n            set: function(value) {\n                this.filter.type = value;\n            }\n        },\n        Q: {\n            enumerable: true,\n            get: function() {\n                return this.filter.Q;\n            },\n            set: function(value) {\n                this.filter.Q.value = value;\n            }\n        },\n        gain: {\n            enumerable: true,\n            get: function() {\n                return this.filter.gain;\n            },\n            set: function(value) {\n                this.filter.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        frequency: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        }\n    });\n\n    Tuna.prototype.Gain = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.gainNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.gainNode);\n        this.gainNode.connect(this.output);\n\n        //don't use setter at init to avoid smoothing\n        this.gainNode.gain.value = initValue(properties.gain, this.defaults.gain.value);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Gain.prototype = Object.create(Super, {\n        name: {\n            value: \"Gain\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                gain: {\n                    value: 1.0,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        gain: {\n            enumerable: true,\n            get: function() {\n                return this.gainNode.gain;\n            },\n            set: function(value) {\n                this.gainNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        }\n    });\n\n    Tuna.prototype.MoogFilter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var in1, in2, in3, in4, out1, out2, out3, out4;\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\n        var input, output, f, fb, i, length, inputFactor;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0);\n            output = e.outputBuffer.getChannelData(0);\n            f = this.cutoff * 1.16;\n            inputFactor = 0.35013 * (f * f) * (f * f);\n            fb = this.resonance * (1.0 - 0.15 * f * f);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                input[i] -= out4 * fb;\n                input[i] *= inputFactor;\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\n                in1 = input[i];\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\n                in2 = out1;\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\n                in3 = out2;\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\n                in4 = out3;\n                output[i] = out4;\n            }\n        };\n\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff.value);\n        this.resonance = initValue(properties.resonance, this.defaults.resonance.value);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\n        name: {\n            value: \"MoogFilter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                cutoff: {\n                    value: 0.065,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 3.5,\n                    min: 0.0,\n                    max: 4.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.processor.cutoff;\n            },\n            set: function(value) {\n                this.processor.cutoff = value;\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this.processor.resonance;\n            },\n            set: function(value) {\n                this.processor.resonance = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Overdrive = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.inputDrive = userContext.createGain();\n        this.waveshaper = userContext.createWaveShaper();\n        this.outputDrive = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.inputDrive);\n        this.inputDrive.connect(this.waveshaper);\n        this.waveshaper.connect(this.outputDrive);\n        this.outputDrive.connect(this.output);\n\n        this.ws_table = new Float32Array(this.k_nSamples);\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\n        this.outputGain = initValue(properties.outputGain, this.defaults.outputGain.value);\n        this.curveAmount = initValue(properties.curveAmount, this.defaults.curveAmount.value);\n        this.algorithmIndex = initValue(properties.algorithmIndex, this.defaults.algorithmIndex.value);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\n        name: {\n            value: \"Overdrive\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                drive: {\n                    value: 0.197,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                outputGain: {\n                    value: -9.154,\n                    min: -46,\n                    max: 0,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                curveAmount: {\n                    value: 0.979,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                algorithmIndex: {\n                    value: 0,\n                    min: 0,\n                    max: 5,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        k_nSamples: {\n            value: 8192\n        },\n        drive: {\n            get: function() {\n                return this.inputDrive.gain;\n            },\n            set: function(value) {\n                this.inputDrive.gain.value = value;\n            }\n        },\n        curveAmount: {\n            get: function() {\n                return this._curveAmount;\n            },\n            set: function(value) {\n                this._curveAmount = value;\n                if (this._algorithmIndex === undefined) {\n                    this._algorithmIndex = 0;\n                }\n                this.waveshaperAlgorithms[this._algorithmIndex](this._curveAmount, this.k_nSamples, this.ws_table);\n                this.waveshaper.curve = this.ws_table;\n            }\n        },\n        outputGain: {\n            get: function() {\n                return this.outputDrive.gain;\n            },\n            set: function(value) {\n                this._outputGain = dbToWAVolume(value);\n                this.outputDrive.gain.setValueAtTime(this._outputGain, userContext.currentTime, 0.01);\n            }\n        },\n        algorithmIndex: {\n            get: function() {\n                return this._algorithmIndex;\n            },\n            set: function(value) {\n                this._algorithmIndex = value;\n                this.curveAmount = this._curveAmount;\n            }\n        },\n        waveshaperAlgorithms: {\n            value: [\n                function(amount, n_samples, ws_table) {\n                    amount = Math.min(amount, 0.9999);\n                    var k = 2 * amount / (1 - amount),\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * (y >= 0 ? 5.8 : 1.2);\n                        ws_table[i] = tanh(y);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, a = 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n                        ws_table[i] = tanh(y * 2);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        abx = Math.abs(x);\n                        if (abx < a) {\n                            y = abx;\n                        } else if (abx > a) {\n                            y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\n                        } else if (abx > 1) {\n                            y = abx;\n                        }\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\n                    }\n                },\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\n                    var i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        if (x < -0.08905) {\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) - 0.032847)) + 0.01;\n                        } else if (x >= -0.08905 && x < 0.320018) {\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\n                        } else {\n                            ws_table[i] = 0.630035;\n                        }\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var a = 2 + Math.round(amount * 14),\n                        // we go from 2 to 16 bits, keep in mind for the UI\n                        bits = Math.round(Math.pow(2, a - 1)),\n                        // real number of quantization steps divided by 2\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = Math.round(x * bits) / bits;\n                    }\n                }\n            ]\n        }\n    });\n\n    Tuna.prototype.Panner = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.panner = userContext.createStereoPanner();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.panner);\n        this.panner.connect(this.output);\n\n        this.pan = initValue(properties.pan, this.defaults.pan.value);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Panner.prototype = Object.create(Super, {\n        name: {\n            value: \"Panner\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                pan: {\n                    value: 0.0,\n                    min: -1.0,\n                    max: 1.0,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        pan: {\n            enumerable: true,\n            get: function() {\n                return this.panner.pan;\n            },\n            set: function(value) {\n                this.panner.pan.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Phaser = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n        this.filtersL = [];\n        this.filtersR = [];\n        this.feedbackGainNodeL = userContext.createGain();\n        this.feedbackGainNodeR = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.filteredSignal = userContext.createGain();\n        this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.filtersL,\n            callback: this.callback\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.filtersR,\n            callback: this.callback\n        });\n\n        var i = this.stage;\n        while (i--) {\n            this.filtersL[i] = userContext.createBiquadFilter();\n            this.filtersR[i] = userContext.createBiquadFilter();\n            this.filtersL[i].type = \"allpass\";\n            this.filtersR[i].type = \"allpass\";\n        }\n        this.input.connect(this.splitter);\n        this.input.connect(this.output);\n        this.splitter.connect(this.filtersL[0], 0, 0);\n        this.splitter.connect(this.filtersR[0], 1, 0);\n        this.connectInOrder(this.filtersL);\n        this.connectInOrder(this.filtersR);\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\n        this.merger.connect(this.output);\n\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\n        name: {\n            value: \"Phaser\"\n        },\n        stage: {\n            value: 4\n        },\n        defaults: {\n            writable: true,\n            value: {\n                rate: {\n                    value: 0.1,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.6,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 40,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                baseModulationFrequency: {\n                    value: 700,\n                    min: 500,\n                    max: 1500,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        callback: {\n            value: function(filters, value) {\n                for (var stage = 0; stage < 4; stage++) {\n                    filters[stage].frequency.value = value;\n                }\n            }\n        },\n        depth: {\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\n            }\n        },\n        rate: {\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        baseModulationFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseModulationFrequency;\n            },\n            set: function(value) {\n                this._baseModulationFrequency = value;\n                this.lfoL.offset = this._baseModulationFrequency;\n                this.lfoR.offset = this._baseModulationFrequency;\n                this.depth = this._depth;\n            }\n        },\n        feedback: {\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\n                this.feedbackGainNodeR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\n            }\n        },\n        stereoPhase: {\n            get: function() {\n                return this._stereoPhase;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR._phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.PingPongDelay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.wet = userContext.createGain();\n        this.stereoToMonoMix = userContext.createGain();\n        this.feedbackLevel = userContext.createGain();\n        this.output = userContext.createGain();\n        this.delayLeft = userContext.createDelay(10);\n        this.delayRight = userContext.createDelay(10);\n\n        this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.merger = userContext.createChannelMerger(2);\n\n        this.activateNode.connect(this.splitter);\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\n        this.stereoToMonoMix.gain.value = .5;\n        this.stereoToMonoMix.connect(this.wet);\n        this.wet.connect(this.delayLeft);\n        this.feedbackLevel.connect(this.wet);\n        this.delayLeft.connect(this.delayRight);\n        this.delayRight.connect(this.feedbackLevel);\n        this.delayLeft.connect(this.merger, 0, 0);\n        this.delayRight.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n        this.activateNode.connect(this.output);\n\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\n        this.wet.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\n        name: {\n            value: \"PingPongDelay\"\n        },\n        delayTimeLeft: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeLeft;\n            },\n            set: function(value) {\n                this._delayTimeLeft = value;\n                this.delayLeft.delayTime.value = value / 1000;\n            }\n        },\n        delayTimeRight: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeRight;\n            },\n            set: function(value) {\n                this._delayTimeRight = value;\n                this.delayRight.delayTime.value = value / 1000;\n            }\n        },\n        wetLevel: {\n            enumerable: true,\n            get: function () {\n                return this.wet.gain;\n            },\n            set: function (value) {\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        }, \n        feedback: {\n            enumerable: true,\n            get: function () {\n                return this.feedbackLevel.gain;\n            },\n            set: function (value) {\n                this.feedbackLevel.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n            }\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTimeLeft: {\n                    value: 200,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                delayTimeRight: {\n                    value: 400,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                feedback: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        }\n    });\n\n    Tuna.prototype.Tremolo = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n        this.amplitudeL = userContext.createGain();\n        this.amplitudeR = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.amplitudeL.gain,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.amplitudeR.gain,\n            callback: pipe\n        });\n\n        this.input.connect(this.splitter);\n        this.splitter.connect(this.amplitudeL, 0);\n        this.splitter.connect(this.amplitudeR, 1);\n        this.amplitudeL.connect(this.merger, 0, 0);\n        this.amplitudeR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.rate = properties.rate || this.defaults.rate.value;\n        this.intensity = initValue(properties.intensity, this.defaults.intensity.value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n\n        this.lfoL.offset = 1 - (this.intensity / 2);\n        this.lfoR.offset = 1 - (this.intensity / 2);\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\n        name: {\n            value: \"Tremolo\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                intensity: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 0,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 5,\n                    min: 0.1,\n                    max: 11,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        intensity: {\n            enumerable: true,\n            get: function() {\n                return this._intensity;\n            },\n            set: function(value) {\n                this._intensity = value;\n                this.lfoL.offset = 1 - this._intensity / 2;\n                this.lfoR.offset = 1 - this._intensity / 2;\n                this.lfoL.oscillation = this._intensity;\n                this.lfoR.oscillation = this._intensity;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        stereoPhase: {\n            enumerable: true,\n            get: function() {\n                return this._stereoPhase;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR.phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.WahWah = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\n            target: this,\n            callback: function(context, value) {\n                context.sweep = value;\n            }\n        });\n        this.filterBp = userContext.createBiquadFilter();\n        this.filterPeaking = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        //Connect AudioNodes\n        this.activateNode.connect(this.filterBp);\n        this.filterBp.connect(this.filterPeaking);\n        this.filterPeaking.connect(this.output);\n\n        //Set Properties\n        this.init();\n        this.automode = initValue(properties.automode, this.defaults.automode.value);\n        this.resonance = properties.resonance || this.defaults.resonance.value;\n        this.sensitivity = initValue(properties.sensitivity, this.defaults.sensitivity.value);\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults.baseFrequency.value);\n        this.excursionOctaves = properties.excursionOctaves || this.defaults.excursionOctaves.value;\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\n\n        this.activateNode.gain.value = 2;\n        this.envelopeFollower.activate(true);\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\n        name: {\n            value: \"WahWah\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                automode: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                baseFrequency: {\n                    value: 0.153,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                excursionOctaves: {\n                    value: 3.3,\n                    min: 1,\n                    max: 6,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sweep: {\n                    value: 0.35,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 19,\n                    min: 1,\n                    max: 100,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sensitivity: {\n                    value: -0.5,\n                    min: -1,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        automode: {\n            get: function() {\n                return this._automode;\n            },\n            set: function(value) {\n                this._automode = value;\n                if (value) {\n                    this.activateNode.connect(this.envelopeFollower.input);\n                    this.envelopeFollower.activate(true);\n                } else {\n                    this.envelopeFollower.activate(false);\n                    this.activateNode.disconnect();\n                    this.activateNode.connect(this.filterBp);\n                }\n            }\n        },\n        filterFreqTimeout: {\n            writable: true,\n            value: 0\n        },\n        setFilterFreq: {\n            value: function() {\n                try {\n                    this.filterBp.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\n                    this.filterPeaking.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\n                } catch (e) {\n                    clearTimeout(this.filterFreqTimeout);\n                    //put on the next cycle to let all init properties be set\n                    this.filterFreqTimeout = setTimeout(function() {\n                        this.setFilterFreq();\n                    }.bind(this), 0);\n                }\n            }\n        },\n        sweep: {\n            enumerable: true,\n            get: function() {\n                return this._sweep;\n            },\n            set: function(value) {\n                this._sweep = Math.pow(value > 1 ? 1 : value < 0 ? 0 : value, this._sensitivity);\n                this.setFilterFreq();\n            }\n        },\n        baseFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseFrequency;\n            },\n            set: function(value) {\n                this._baseFrequency = 50 * Math.pow(10, value * 2);\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\n                this.setFilterFreq();\n            }\n        },\n        excursionOctaves: {\n            enumerable: true,\n            get: function() {\n                return this._excursionOctaves;\n            },\n            set: function(value) {\n                this._excursionOctaves = value;\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\n                this.setFilterFreq();\n            }\n        },\n        sensitivity: {\n            enumerable: true,\n            get: function() {\n                return this._sensitivity;\n            },\n            set: function(value) {\n                this._sensitivity = Math.pow(10, value);\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this._resonance;\n            },\n            set: function(value) {\n                this._resonance = value;\n                this.filterPeaking.Q.value = this._resonance;\n            }\n        },\n        init: {\n            value: function() {\n                this.output.gain.value = 1;\n                this.filterPeaking.type = \"peaking\";\n                this.filterBp.type = \"bandpass\";\n                this.filterPeaking.frequency.value = 100;\n                this.filterPeaking.gain.value = 20;\n                this.filterPeaking.Q.value = 5;\n                this.filterBp.frequency.value = 100;\n                this.filterBp.Q.value = 1;\n            }\n        }\n    });\n\n    Tuna.prototype.EnvelopeFollower = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.jsNode = this.output = userContext.createScriptProcessor(this.buffersize, 1, 1);\n\n        this.input.connect(this.output);\n\n        this.attackTime = initValue(properties.attackTime, this.defaults.attackTime.value);\n        this.releaseTime = initValue(properties.releaseTime, this.defaults.releaseTime.value);\n        this._envelope = 0;\n        this.target = properties.target || {};\n        this.callback = properties.callback || function() {};\n\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\n        name: {\n            value: \"EnvelopeFollower\"\n        },\n        defaults: {\n            value: {\n                attackTime: {\n                    value: 0.003,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                },\n                releaseTime: {\n                    value: 0.5,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        buffersize: {\n            value: 256\n        },\n        envelope: {\n            value: 0\n        },\n        sampleRate: {\n            value: 44100\n        },\n        attackTime: {\n            enumerable: true,\n            get: function() {\n                return this._attackTime;\n            },\n            set: function(value) {\n                this._attackTime = value;\n                this._attackC = Math.exp(-1 / this._attackTime * this.sampleRate / this.buffersize);\n            }\n        },\n        releaseTime: {\n            enumerable: true,\n            get: function() {\n                return this._releaseTime;\n            },\n            set: function(value) {\n                this._releaseTime = value;\n                this._releaseC = Math.exp(-1 / this._releaseTime * this.sampleRate / this.buffersize);\n            }\n        },\n        callback: {\n            get: function() {\n                return this._callback;\n            },\n            set: function(value) {\n                if (typeof value === \"function\") {\n                    this._callback = value;\n                } else {\n                    console.error(\"tuna.js: \" + this.name + \": Callback must be a function!\");\n                }\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                this.activated = doActivate;\n                if (doActivate) {\n                    this.jsNode.connect(userContext.destination);\n                    this.jsNode.onaudioprocess = this.returnCompute(this);\n                } else {\n                    this.jsNode.disconnect();\n                    this.jsNode.onaudioprocess = null;\n                }\n                if (this.activateCallback) {\n                    this.activateCallback(doActivate);\n                }\n            }\n        },\n        returnCompute: {\n            value: function(instance) {\n                return function(event) {\n                    instance.compute(event);\n                };\n            }\n        },\n        compute: {\n            value: function(event) {\n                var count = event.inputBuffer.getChannelData(0).length,\n                    channels = event.inputBuffer.numberOfChannels,\n                    current, chan, rms, i;\n                chan = rms = i = 0;\n\n                for(chan = 0; chan < channels; ++chan) {\n                    for (i = 0; i < count; ++i) {\n                        current = event.inputBuffer.getChannelData(chan)[i];\n                        rms += (current * current);\n                    }\n                }\n                rms = Math.sqrt(rms / channels);\n\n                if (this._envelope < rms) {\n                    this._envelope *= this._attackC;\n                    this._envelope += (1 - this._attackC) * rms;\n                } else {\n                    this._envelope *= this._releaseC;\n                    this._envelope += (1 - this._releaseC) * rms;\n                }\n                this._callback(this._target, this._envelope);\n            }\n        }\n    });\n\n    Tuna.prototype.LFO = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n\n        //Instantiate AudioNode\n        this.input = userContext.createGain();\n        this.output = userContext.createScriptProcessor(256, 1, 1);\n        this.activateNode = userContext.destination;\n\n        //Set Properties\n        this.frequency = initValue(properties.frequency, this.defaults.frequency.value);\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\n        this.oscillation = initValue(properties.oscillation, this.defaults.oscillation.value);\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\n        this.target = properties.target || {};\n        this.output.onaudioprocess = this.callback(properties.callback || function() {});\n        this.bypass = properties.bypass || this.defaults.bypass.value;\n    };\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\n        name: {\n            value: \"LFO\"\n        },\n        bufferSize: {\n            value: 256\n        },\n        sampleRate: {\n            value: 44100\n        },\n        defaults: {\n            value: {\n                frequency: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: false,\n                    type: FLOAT\n                },\n                offset: {\n                    value: 0.85,\n                    min: 0,\n                    max: 22049,\n                    automatable: false,\n                    type: FLOAT\n                },\n                oscillation: {\n                    value: 0.3,\n                    min: -22050,\n                    max: 22050,\n                    automatable: false,\n                    type: FLOAT\n                },\n                phase: {\n                    value: 0,\n                    min: 0,\n                    max: 2 * Math.PI,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        frequency: {\n            get: function() {\n                return this._frequency;\n            },\n            set: function(value) {\n                this._frequency = value;\n                this._phaseInc = 2 * Math.PI * this._frequency * this.bufferSize / this.sampleRate;\n            }\n        },\n        offset: {\n            get: function() {\n                return this._offset;\n            },\n            set: function(value) {\n                this._offset = value;\n            }\n        },\n        oscillation: {\n            get: function() {\n                return this._oscillation;\n            },\n            set: function(value) {\n                this._oscillation = value;\n            }\n        },\n        phase: {\n            get: function() {\n                return this._phase;\n            },\n            set: function(value) {\n                this._phase = value;\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                if (doActivate) {\n                    this.output.connect(userContext.destination);\n                    if (this.activateCallback) {\n                        this.activateCallback(doActivate);\n                    }\n                } else {\n                    this.output.disconnect();\n                }\n            }\n        },\n        callback: {\n            value: function(callback) {\n                var that = this;\n                return function() {\n                    that._phase += that._phaseInc;\n                    if (that._phase > 2 * Math.PI) {\n                        that._phase = 0;\n                    }\n                    callback(that._target, that._offset + that._oscillation * Math.sin(that._phase));\n                };\n            }\n        }\n    });\n\n    Tuna.toString = Tuna.prototype.toString = function() {\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\n    };\n})();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__156__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","async function audioBufferToWaveBlob(audioBuffer) {\r\n  return new Promise(function (resolve, reject) {\r\n    var worker = new Worker(\"/waveWorker.js\");\r\n\r\n    worker.onmessage = function (e) {\r\n      var blob = new Blob([e.data.buffer], { type: \"audio/wav\" });\r\n      resolve(blob);\r\n    };\r\n\r\n    let pcmArrays = [];\r\n    for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\r\n      pcmArrays.push(audioBuffer.getChannelData(i));\r\n    }\r\n\r\n    worker.postMessage({\r\n      pcmArrays,\r\n      config: { sampleRate: audioBuffer.sampleRate },\r\n    });\r\n  });\r\n}\r\n\r\nexport default audioBufferToWaveBlob;\r\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\r\nasync function alien1Transform(audioBuffer) {\r\n  let ctx = new OfflineAudioContext(\r\n    audioBuffer.numberOfChannels,\r\n    audioBuffer.length,\r\n    audioBuffer.sampleRate\r\n  );\r\n\r\n  let source = ctx.createBufferSource();\r\n  source.buffer = audioBuffer;\r\n\r\n  let oscillator = ctx.createOscillator();\r\n  oscillator.frequency.value = 5;\r\n  oscillator.type = \"sine\";\r\n\r\n  let oscillatorGain = ctx.createGain();\r\n  oscillatorGain.gain.value = 0.05;\r\n\r\n  let delay = ctx.createDelay();\r\n  delay.delayTime.value = 0.05;\r\n\r\n  // source --> delay --> ctx.destination\r\n  // oscillator --> oscillatorGain --> delay.delayTime --> ctx.destination\r\n\r\n  source.connect(delay);\r\n  delay.connect(ctx.destination);\r\n\r\n  oscillator.connect(oscillatorGain);\r\n  oscillatorGain.connect(delay.delayTime);\r\n\r\n  oscillator.start();\r\n  source.start();\r\n\r\n  let outputAudioBuffer = await ctx.startRendering();\r\n  return outputAudioBuffer;\r\n}\r\n\r\nexport default alien1Transform;\r\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\r\nasync function alien2Transform(audioBuffer) {\r\n  let ctx = new OfflineAudioContext(\r\n    audioBuffer.numberOfChannels,\r\n    audioBuffer.length,\r\n    audioBuffer.sampleRate\r\n  );\r\n\r\n  let source = ctx.createBufferSource();\r\n  source.buffer = audioBuffer;\r\n\r\n  let oscillator = ctx.createOscillator();\r\n  oscillator.frequency.value = 20;\r\n  oscillator.type = \"sine\";\r\n\r\n  let oscillatorGain = ctx.createGain();\r\n  oscillatorGain.gain.value = 0.01;\r\n\r\n  let delay = ctx.createDelay();\r\n  delay.delayTime.value = 0.05;\r\n\r\n  // source --> delay --> ctx.destination\r\n  // oscillator --> oscillatorGain --> delay.delayTime --> ctx.destination\r\n\r\n  source.connect(delay);\r\n  delay.connect(ctx.destination);\r\n\r\n  oscillator.connect(oscillatorGain);\r\n  oscillatorGain.connect(delay.delayTime);\r\n\r\n  oscillator.start();\r\n  source.start();\r\n\r\n  let outputAudioBuffer = await ctx.startRendering();\r\n  return outputAudioBuffer;\r\n}\r\n\r\nexport default alien2Transform;\r\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\r\nasync function alienRobot1Transform(audioBuffer) {\r\n  let ctx = new OfflineAudioContext(\r\n    audioBuffer.numberOfChannels,\r\n    audioBuffer.length,\r\n    audioBuffer.sampleRate\r\n  );\r\n\r\n  let source = ctx.createBufferSource();\r\n  source.buffer = audioBuffer;\r\n\r\n  let oscillator = ctx.createOscillator();\r\n  oscillator.frequency.value = 40;\r\n  oscillator.type = \"sine\";\r\n\r\n  let oscillatorGain = ctx.createGain();\r\n  oscillatorGain.gain.value = 0.015;\r\n\r\n  let delay = ctx.createDelay();\r\n  delay.delayTime.value = 0.05;\r\n\r\n  // source --> delay --> ctx.destination\r\n  // oscillator --> oscillatorGain --> delay.delayTime --> ctx.destination\r\n\r\n  source.connect(delay);\r\n  delay.connect(ctx.destination);\r\n\r\n  oscillator.connect(oscillatorGain);\r\n  oscillatorGain.connect(delay.delayTime);\r\n\r\n  oscillator.start();\r\n  source.start();\r\n\r\n  let outputAudioBuffer = await ctx.startRendering();\r\n  return outputAudioBuffer;\r\n}\r\n\r\nexport default alienRobot1Transform;\r\n","// Copyright 2012, Google Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n//     * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n//     * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n//     * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nfunction createFadeBuffer(context, activeTime, fadeTime) {\r\n  var length1 = activeTime * context.sampleRate;\r\n  var length2 = (activeTime - 2 * fadeTime) * context.sampleRate;\r\n  var length = length1 + length2;\r\n  var buffer = context.createBuffer(1, length, context.sampleRate);\r\n  var p = buffer.getChannelData(0);\r\n\r\n  console.log(\"createFadeBuffer() length = \" + length);\r\n\r\n  var fadeLength = fadeTime * context.sampleRate;\r\n\r\n  var fadeIndex1 = fadeLength;\r\n  var fadeIndex2 = length1 - fadeLength;\r\n\r\n  // 1st part of cycle\r\n  for (var i = 0; i < length1; ++i) {\r\n    var value;\r\n\r\n    if (i < fadeIndex1) {\r\n      value = Math.sqrt(i / fadeLength);\r\n    } else if (i >= fadeIndex2) {\r\n      value = Math.sqrt(1 - (i - fadeIndex2) / fadeLength);\r\n    } else {\r\n      value = 1;\r\n    }\r\n\r\n    p[i] = value;\r\n  }\r\n\r\n  // 2nd part\r\n  for (var i = length1; i < length; ++i) {\r\n    p[i] = 0;\r\n  }\r\n\r\n  return buffer;\r\n}\r\n\r\nfunction createDelayTimeBuffer(context, activeTime, fadeTime, shiftUp) {\r\n  var length1 = activeTime * context.sampleRate;\r\n  var length2 = (activeTime - 2 * fadeTime) * context.sampleRate;\r\n  var length = length1 + length2;\r\n  var buffer = context.createBuffer(1, length, context.sampleRate);\r\n  var p = buffer.getChannelData(0);\r\n\r\n  console.log(\"createDelayTimeBuffer() length = \" + length);\r\n\r\n  // 1st part of cycle\r\n  for (var i = 0; i < length1; ++i) {\r\n    if (shiftUp)\r\n      // This line does shift-up transpose\r\n      p[i] = (length1 - i) / length;\r\n    // This line does shift-down transpose\r\n    else p[i] = i / length1;\r\n  }\r\n\r\n  // 2nd part\r\n  for (var i = length1; i < length; ++i) {\r\n    p[i] = 0;\r\n  }\r\n\r\n  return buffer;\r\n}\r\n\r\nvar delayTime = 0.1;\r\nvar fadeTime = 0.05;\r\nvar bufferTime = 0.1;\r\n\r\nfunction Jungle(context) {\r\n  this.context = context;\r\n  // Create nodes for the input and output of this \"module\".\r\n  var input = context.createGain();\r\n  var output = context.createGain();\r\n  this.input = input;\r\n  this.output = output;\r\n\r\n  // Delay modulation.\r\n  var mod1 = context.createBufferSource();\r\n  var mod2 = context.createBufferSource();\r\n  var mod3 = context.createBufferSource();\r\n  var mod4 = context.createBufferSource();\r\n  this.shiftDownBuffer = createDelayTimeBuffer(\r\n    context,\r\n    bufferTime,\r\n    fadeTime,\r\n    false\r\n  );\r\n  this.shiftUpBuffer = createDelayTimeBuffer(\r\n    context,\r\n    bufferTime,\r\n    fadeTime,\r\n    true\r\n  );\r\n  mod1.buffer = this.shiftDownBuffer;\r\n  mod2.buffer = this.shiftDownBuffer;\r\n  mod3.buffer = this.shiftUpBuffer;\r\n  mod4.buffer = this.shiftUpBuffer;\r\n  mod1.loop = true;\r\n  mod2.loop = true;\r\n  mod3.loop = true;\r\n  mod4.loop = true;\r\n\r\n  // for switching between oct-up and oct-down\r\n  var mod1Gain = context.createGain();\r\n  var mod2Gain = context.createGain();\r\n  var mod3Gain = context.createGain();\r\n  mod3Gain.gain.value = 0;\r\n  var mod4Gain = context.createGain();\r\n  mod4Gain.gain.value = 0;\r\n\r\n  mod1.connect(mod1Gain);\r\n  mod2.connect(mod2Gain);\r\n  mod3.connect(mod3Gain);\r\n  mod4.connect(mod4Gain);\r\n\r\n  // Delay amount for changing pitch.\r\n  var modGain1 = context.createGain();\r\n  var modGain2 = context.createGain();\r\n\r\n  var delay1 = context.createDelay();\r\n  var delay2 = context.createDelay();\r\n  mod1Gain.connect(modGain1);\r\n  mod2Gain.connect(modGain2);\r\n  mod3Gain.connect(modGain1);\r\n  mod4Gain.connect(modGain2);\r\n  modGain1.connect(delay1.delayTime);\r\n  modGain2.connect(delay2.delayTime);\r\n\r\n  // Crossfading.\r\n  var fade1 = context.createBufferSource();\r\n  var fade2 = context.createBufferSource();\r\n  var fadeBuffer = createFadeBuffer(context, bufferTime, fadeTime);\r\n  fade1.buffer = fadeBuffer;\r\n  fade2.buffer = fadeBuffer;\r\n  fade1.loop = true;\r\n  fade2.loop = true;\r\n\r\n  var mix1 = context.createGain();\r\n  var mix2 = context.createGain();\r\n  mix1.gain.value = 0;\r\n  mix2.gain.value = 0;\r\n\r\n  fade1.connect(mix1.gain);\r\n  fade2.connect(mix2.gain);\r\n\r\n  // Connect processing graph.\r\n  input.connect(delay1);\r\n  input.connect(delay2);\r\n  delay1.connect(mix1);\r\n  delay2.connect(mix2);\r\n  mix1.connect(output);\r\n  mix2.connect(output);\r\n\r\n  // Start\r\n  var t = context.currentTime + 0.05;\r\n  var t2 = t + bufferTime - fadeTime;\r\n  mod1.start(t);\r\n  mod2.start(t2);\r\n  mod3.start(t);\r\n  mod4.start(t2);\r\n  fade1.start(t);\r\n  fade2.start(t2);\r\n\r\n  this.mod1 = mod1;\r\n  this.mod2 = mod2;\r\n  this.mod1Gain = mod1Gain;\r\n  this.mod2Gain = mod2Gain;\r\n  this.mod3Gain = mod3Gain;\r\n  this.mod4Gain = mod4Gain;\r\n  this.modGain1 = modGain1;\r\n  this.modGain2 = modGain2;\r\n  this.fade1 = fade1;\r\n  this.fade2 = fade2;\r\n  this.mix1 = mix1;\r\n  this.mix2 = mix2;\r\n  this.delay1 = delay1;\r\n  this.delay2 = delay2;\r\n\r\n  this.setDelay(delayTime);\r\n}\r\n\r\nJungle.prototype.setDelay = function (delayTime) {\r\n  this.modGain1.gain.setTargetAtTime(0.5 * delayTime, 0, 0.01);\r\n  this.modGain2.gain.setTargetAtTime(0.5 * delayTime, 0, 0.01);\r\n};\r\n\r\nvar previousPitch = -1;\r\n\r\nJungle.prototype.setPitchOffset = function (mult) {\r\n  if (mult > 0) {\r\n    // pitch up\r\n    this.mod1Gain.gain.value = 0;\r\n    this.mod2Gain.gain.value = 0;\r\n    this.mod3Gain.gain.value = 1;\r\n    this.mod4Gain.gain.value = 1;\r\n  } else {\r\n    // pitch down\r\n    this.mod1Gain.gain.value = 1;\r\n    this.mod2Gain.gain.value = 1;\r\n    this.mod3Gain.gain.value = 0;\r\n    this.mod4Gain.gain.value = 0;\r\n  }\r\n  this.setDelay(delayTime * Math.abs(mult));\r\n  previousPitch = mult;\r\n};\r\nexport default Jungle;\r\n","import Jungle from \"../helpers/jungle\";\nasync function baneTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wave shaper\n  let waveShaper = ctx.createWaveShaper();\n  waveShaper.curve = makeDistortionCurve(7);\n  function makeDistortionCurve(amount) {\n    var k = typeof amount === \"number\" ? amount : 50;\n    var n_samples = 44100;\n    var curve = new Float32Array(n_samples);\n    var deg = Math.PI / 180;\n    var x;\n    for (let i = 0; i < n_samples; ++i) {\n      x = (i * 2) / n_samples - 1;\n      curve[i] = ((3 + k) * x * 20 * deg) / (Math.PI + k * Math.abs(x));\n    }\n    return curve;\n  }\n\n  // Pitch\n  let deeper = new Jungle(ctx);\n  deeper.setPitchOffset(-0.25);\n\n  // Telephone\n  let lpf1 = ctx.createBiquadFilter();\n  lpf1.type = \"lowpass\";\n  lpf1.frequency.value = 5000.0;\n  let lpf2 = ctx.createBiquadFilter();\n  lpf2.type = \"lowpass\";\n  lpf2.frequency.value = 5000.0;\n  let hpf1 = ctx.createBiquadFilter();\n  hpf1.type = \"highpass\";\n  hpf1.frequency.value = 100.0;\n  let hpf2 = ctx.createBiquadFilter();\n  hpf2.type = \"highpass\";\n  hpf2.frequency.value = 100.0;\n  let compressor = ctx.createDynamicsCompressor();\n  lpf1.connect(lpf2);\n  lpf2.connect(hpf1);\n  hpf1.connect(hpf2);\n  hpf2.connect(waveShaper);\n\n  source.connect(deeper.input);\n  deeper.output.connect(lpf1);\n\n  waveShaper.connect(compressor);\n  compressor.connect(ctx.destination);\n\n  source.start(0);\n  return await ctx.startRendering();\n}\n\nexport default baneTransform;\n","async function doWorkerTask(workerFunction, input, buffers) {\r\n  // Create worker\r\n  let fnString =\r\n    \"(\" + workerFunction.toString().replace('\"use strict\";', \"\") + \")();\";\r\n  let workerBlob = new Blob([fnString]);\r\n  let workerBlobURL = window.URL.createObjectURL(workerBlob, {\r\n    type: \"application/javascript; charset=utf-8\",\r\n  });\r\n  let worker = new Worker(workerBlobURL);\r\n\r\n  // Run worker\r\n  return await new Promise(function (resolve, reject) {\r\n    worker.onmessage = function (e) {\r\n      resolve(e.data);\r\n    };\r\n    worker.postMessage(input, buffers);\r\n  });\r\n}\r\nexport default doWorkerTask;\r\n","import doWorkerTask from \"../helpers/waveWorker\";\nasync function chunkedReversedTransform(audioBuffer) {\n  let channels = [];\n  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n    channels[i] = new Float32Array(audioBuffer.getChannelData(i));\n  }\n\n  // Run worker\n  let outputChannels = await doWorkerTask(\n    function () {\n      global.onmessage = function (e) {\n        let inputChannels = e.data.channels;\n        let sampleRate = e.data.sampleRate;\n        let chunkSeconds = 0.7;\n        let chunkSize = chunkSeconds * sampleRate;\n\n        let outputChannels = [];\n        for (let i = 0; i < inputChannels.length; i++) {\n          let input = inputChannels[i];\n          let output = new Float32Array(input.length);\n\n          // cut input at nodal points\n          let chunks = [];\n          let currentChunk = [];\n          for (let j = 0; j < input.length; j++) {\n            if (currentChunk.length >= chunkSize) {\n              chunks.push(currentChunk);\n              currentChunk = [];\n            }\n            currentChunk.push(input[j]);\n          }\n\n          // play with chunks\n          for (let j = 0; j < chunks.length; j++) {\n            chunks[j].reverse();\n          }\n\n          // join chunks\n          let m = 0;\n          for (let j = 0; j < chunks.length; j++) {\n            for (let k = 0; k < chunks[j].length; k++) {\n              output[m] = chunks[j][k];\n              m++;\n            }\n          }\n\n          outputChannels.push(output);\n        }\n\n        global.postMessage(outputChannels, [\n          ...outputChannels.map((c) => c.buffer),\n          ...inputChannels.map((c) => c.buffer),\n        ]);\n        global.close();\n      };\n    },\n    { channels, sampleRate: audioBuffer.sampleRate },\n    channels.map((c) => c.buffer)\n  );\n\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n\n  audioBuffer = ctx.createBuffer(\n    outputChannels.length,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n  for (let i = 0; i < outputChannels.length; i++) {\n    audioBuffer.copyToChannel(outputChannels[i], i);\n  }\n\n  return audioBuffer;\n}\nexport default chunkedReversedTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\r\nasync function churchTransform(audioBuffer) {\r\n  let ctx = new OfflineAudioContext(\r\n    audioBuffer.numberOfChannels,\r\n    audioBuffer.length,\r\n    audioBuffer.sampleRate\r\n  );\r\n\r\n  // Source\r\n  let source = ctx.createBufferSource();\r\n  source.buffer = audioBuffer;\r\n\r\n  // Reverb\r\n  let convolver = ctx.createConvolver();\r\n  convolver.buffer = await ctx.decodeAudioData(\r\n    await (await fetch(\"/audio/impulse-responses/church.wav\")).arrayBuffer()\r\n  );\r\n\r\n  // Create graph\r\n  source.connect(convolver);\r\n  convolver.connect(ctx.destination);\r\n\r\n  // Render\r\n  source.start();\r\n  let outputAudioBuffer = await ctx.startRendering();\r\n  return outputAudioBuffer;\r\n}\r\n\r\nexport default churchTransform;\r\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\r\nasync function cymbalTransform(audioBuffer) {\r\n  let ctx = new OfflineAudioContext(\r\n    audioBuffer.numberOfChannels,\r\n    audioBuffer.length,\r\n    audioBuffer.sampleRate\r\n  );\r\n\r\n  // Source\r\n  let source = ctx.createBufferSource();\r\n  source.buffer = audioBuffer;\r\n\r\n  // Reverb\r\n  let convolver = ctx.createConvolver();\r\n  convolver.buffer = await ctx.decodeAudioData(\r\n    await (await fetch(\"/audio/impulse-responses/cymbal.wav\")).arrayBuffer()\r\n  );\r\n\r\n  // Create graph\r\n  source.connect(convolver);\r\n  convolver.connect(ctx.destination);\r\n\r\n  // Render\r\n  source.start();\r\n  let outputAudioBuffer = await ctx.startRendering();\r\n  return outputAudioBuffer;\r\n}\r\n\r\nexport default cymbalTransform;\r\n","/*\r\n * Copyright (c) 2012 The Chromium Authors. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *    * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *    * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *    * Neither the name of Google Inc. nor the names of its\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n// Since all this stuff depends on global data, just wrap it all in a clousure\r\n// for tidyness, and so we can call it multiple times.\r\nfunction vocoder(ctx, cb, mb, opts = {}) {\r\n  var audioContext = null;\r\n  var modulatorBuffer = null;\r\n  var carrierBuffer = null;\r\n  var modulatorNode = null;\r\n  var carrierNode = null;\r\n  var vocoding = false;\r\n\r\n  var FILTER_QUALITY = 6; // The Q value for the carrier and modulator filters\r\n\r\n  // These are \"placeholder\" gain nodes - because the modulator and carrier will get swapped in\r\n  // as they are loaded, it's easier to connect these nodes to all the bands, and the \"real\"\r\n  // modulator & carrier AudioBufferSourceNodes connect to these.\r\n  var modulatorInput = null;\r\n  var carrierInput = null;\r\n\r\n  var modulatorGain = null;\r\n  var modulatorGainValue =\r\n    opts.modulatorGain === undefined ? 1.0 : opts.modulatorGain;\r\n\r\n  // noise node added to the carrier signal\r\n  var noiseBuffer = null;\r\n  var noiseNode = null;\r\n  var noiseGain = null;\r\n  var noiseGainValue = opts.noise === undefined ? 0.2 : opts.noise;\r\n\r\n  // Carrier sample gain\r\n  var carrierSampleNode = null;\r\n  var carrierSampleGain = null;\r\n  var carrierSampleGainValue = opts.sample === undefined ? 0.0 : opts.sample;\r\n\r\n  // Carrier Synth oscillator stuff\r\n  var oscillatorNode = null;\r\n  var oscillatorType = 4; // CUSTOM\r\n  var oscillatorGain = null;\r\n  var oscillatorGainValue = opts.synth === undefined ? 1.0 : opts.synth;\r\n  var oscillatorDetuneValue =\r\n    opts.synthDetune === undefined ? 0 : opts.synthDetune;\r\n  var FOURIER_SIZE = 4096;\r\n  var wavetable = null;\r\n  var wavetableSignalGain = null;\r\n  var WAVETABLEBOOST = 40.0;\r\n  var SAWTOOTHBOOST = 0.4;\r\n\r\n  // These are the arrays of nodes - the \"columns\" across the frequency band \"rows\"\r\n  var modFilterBands = null; // tuned bandpass filters\r\n  var modFilterPostGains = null; // post-filter gains.\r\n  var heterodynes = null; // gain nodes used to multiply bandpass X sine\r\n  var powers = null; // gain nodes used to multiply prev out by itself\r\n  var lpFilters = null; // tuned LP filters to remove doubled copy of product\r\n  var lpFilterPostGains = null; // gain nodes for tuning input to waveshapers\r\n  var carrierBands = null; // tuned bandpass filters, same as modFilterBands but in carrier chain\r\n  var carrierFilterPostGains = null; // post-bandpass gain adjustment\r\n  var carrierBandGains = null; // these are the \"control gains\" driven by the lpFilters\r\n\r\n  var vocoderBands;\r\n  var numVocoderBands;\r\n\r\n  var hpFilterGain = null;\r\n\r\n  var finalOutput = null;\r\n\r\n  function shutOffCarrier() {\r\n    oscillatorNode.stop(0);\r\n    oscillatorNode = null;\r\n    noiseNode.stop(0);\r\n    noiseNode = null;\r\n    carrierSampleNode.stop(0);\r\n    carrierSampleNode = null;\r\n  }\r\n\r\n  function selectSawtooth() {\r\n    if (wavetableSignalGain) wavetableSignalGain.gain.value = SAWTOOTHBOOST;\r\n    if (oscillatorNode) oscillatorNode.type = \"sawtooth\";\r\n  }\r\n\r\n  function selectWavetable() {\r\n    if (wavetableSignalGain) wavetableSignalGain.gain.value = WAVETABLEBOOST;\r\n    if (oscillatorNode)\r\n      oscillatorNode.setPeriodicWave\r\n        ? oscillatorNode.setPeriodicWave(wavetable)\r\n        : oscillatorNode.setWaveTable(wavetable);\r\n    wavetableSignalGain.gain.value = WAVETABLEBOOST;\r\n  }\r\n\r\n  function onUpdateModGain(event, ui) {\r\n    modulatorGainValue = ui.value;\r\n    if (modulatorGain) modulatorGain.gain.value = ui.value;\r\n  }\r\n\r\n  // sample-based carrier\r\n  function onUpdateSampleLevel(event, ui) {\r\n    carrierSampleGainValue = ui.value;\r\n    if (carrierSampleGain) carrierSampleGain.gain.value = ui.value;\r\n  }\r\n\r\n  // noise in carrier\r\n  function onUpdateSynthLevel(event, ui) {\r\n    oscillatorGainValue = ui.value;\r\n    if (oscillatorGain) oscillatorGain.gain.value = ui.value;\r\n  }\r\n\r\n  // noise in carrier\r\n  function onUpdateNoiseLevel(event, ui) {\r\n    noiseGainValue = ui.value;\r\n    if (noiseGain) noiseGain.gain.value = ui.value;\r\n  }\r\n\r\n  // this function will algorithmically re-calculate vocoder bands, distributing evenly\r\n  // from startFreq to endFreq, splitting evenly (logarhythmically) into a given numBands.\r\n  // The function places this info into the global vocoderBands and numVocoderBands variables.\r\n  function generateVocoderBands(startFreq, endFreq, numBands) {\r\n    // Remember: 1200 cents in octave, 100 cents per semitone\r\n\r\n    var totalRangeInCents = (1200 * Math.log(endFreq / startFreq)) / Math.LN2;\r\n    var centsPerBand = totalRangeInCents / numBands;\r\n    var scale = Math.pow(2, centsPerBand / 1200); // This is the scaling for successive bands\r\n\r\n    vocoderBands = [];\r\n    var currentFreq = startFreq;\r\n\r\n    for (var i = 0; i < numBands; i++) {\r\n      vocoderBands[i] = new Object();\r\n      vocoderBands[i].frequency = currentFreq;\r\n      //console.log( \"Band \" + i + \" centered at \" + currentFreq + \"Hz\" );\r\n      currentFreq = currentFreq * scale;\r\n    }\r\n\r\n    numVocoderBands = numBands;\r\n  }\r\n\r\n  function loadNoiseBuffer() {\r\n    // create a 5-second buffer of noise\r\n    var lengthInSamples = 5 * audioContext.sampleRate;\r\n    noiseBuffer = audioContext.createBuffer(\r\n      1,\r\n      lengthInSamples,\r\n      audioContext.sampleRate\r\n    );\r\n    var bufferData = noiseBuffer.getChannelData(0);\r\n\r\n    for (var i = 0; i < lengthInSamples; ++i) {\r\n      bufferData[i] = 2 * Math.random() - 1; // -1 to +1\r\n    }\r\n  }\r\n\r\n  function initBandpassFilters() {\r\n    // When this function is called, the carrierNode and modulatorAnalyser\r\n    // may not already be created.  Create placeholder nodes for them.\r\n    modulatorInput = audioContext.createGain();\r\n    carrierInput = audioContext.createGain();\r\n\r\n    if (modFilterBands == null) modFilterBands = new Array();\r\n\r\n    if (modFilterPostGains == null) modFilterPostGains = new Array();\r\n\r\n    if (heterodynes == null) heterodynes = new Array();\r\n\r\n    if (powers == null) powers = new Array();\r\n\r\n    if (lpFilters == null) lpFilters = new Array();\r\n\r\n    if (lpFilterPostGains == null) lpFilterPostGains = new Array();\r\n\r\n    if (carrierBands == null) carrierBands = new Array();\r\n\r\n    if (carrierFilterPostGains == null) carrierFilterPostGains = new Array();\r\n\r\n    if (carrierBandGains == null) carrierBandGains = new Array();\r\n\r\n    var waveShaperCurve = new Float32Array(65536);\r\n    // Populate with a \"curve\" that does an abs()\r\n    var n = 65536;\r\n    var n2 = n / 2;\r\n    let x;\r\n    for (var i = 0; i < n2; ++i) {\r\n      x = i / n2;\r\n\r\n      waveShaperCurve[n2 + i] = x;\r\n      waveShaperCurve[n2 - i - 1] = x;\r\n    }\r\n\r\n    // Set up a high-pass filter to add back in the fricatives, etc.\r\n    // (this isn't used by default in the \"production\" version, as I hid the slider)\r\n    var hpFilter = audioContext.createBiquadFilter();\r\n    hpFilter.type = \"highpass\";\r\n    hpFilter.frequency.value = 8000; // or use vocoderBands[numVocoderBands-1].frequency;\r\n    hpFilter.Q.value = 1; //  no peaking\r\n    modulatorInput.connect(hpFilter);\r\n\r\n    hpFilterGain = audioContext.createGain();\r\n    hpFilterGain.gain.value = 0.0;\r\n\r\n    finalOutput = audioContext.createGain();\r\n\r\n    hpFilter.connect(hpFilterGain);\r\n    hpFilterGain.connect(finalOutput);\r\n\r\n    //clear the arrays\r\n    modFilterBands.length = 0;\r\n    modFilterPostGains.length = 0;\r\n    heterodynes.length = 0;\r\n    powers.length = 0;\r\n    lpFilters.length = 0;\r\n    lpFilterPostGains.length = 0;\r\n    carrierBands.length = 0;\r\n    carrierFilterPostGains.length = 0;\r\n    carrierBandGains.length = 0;\r\n\r\n    var outputGain = audioContext.createGain();\r\n    outputGain.connect(finalOutput);\r\n\r\n    var rectifierCurve = new Float32Array(65536);\r\n    for (var i = -32768; i < 32768; i++)\r\n      rectifierCurve[i + 32768] = (i > 0 ? i : -i) / 32768;\r\n\r\n    for (var i = 0; i < numVocoderBands; i++) {\r\n      // CREATE THE MODULATOR CHAIN\r\n      // create the bandpass filter in the modulator chain\r\n      var modulatorFilter = audioContext.createBiquadFilter();\r\n      modulatorFilter.type = \"bandpass\"; // Bandpass filter\r\n      modulatorFilter.frequency.value = vocoderBands[i].frequency;\r\n      modulatorFilter.Q.value = FILTER_QUALITY; //  initial quality\r\n      modulatorInput.connect(modulatorFilter);\r\n      modFilterBands.push(modulatorFilter);\r\n\r\n      // Now, create a second bandpass filter tuned to the same frequency -\r\n      // this turns our second-order filter into a 4th-order filter,\r\n      // which has a steeper rolloff/octave\r\n      var secondModulatorFilter = audioContext.createBiquadFilter();\r\n      secondModulatorFilter.type = \"bandpass\"; // Bandpass filter\r\n      secondModulatorFilter.frequency.value = vocoderBands[i].frequency;\r\n      secondModulatorFilter.Q.value = FILTER_QUALITY; //  initial quality\r\n      modulatorFilter.chainedFilter = secondModulatorFilter;\r\n      modulatorFilter.connect(secondModulatorFilter);\r\n\r\n      // create a post-filtering gain to bump the levels up.\r\n      var modulatorFilterPostGain = audioContext.createGain();\r\n      modulatorFilterPostGain.gain.value = 6;\r\n      secondModulatorFilter.connect(modulatorFilterPostGain);\r\n      modFilterPostGains.push(modulatorFilterPostGain);\r\n\r\n      // Create the sine oscillator for the heterodyne\r\n      var heterodyneOscillator = audioContext.createOscillator();\r\n      heterodyneOscillator.frequency.value = vocoderBands[i].frequency;\r\n\r\n      heterodyneOscillator.start(0);\r\n\r\n      // Create the node to multiply the sine by the modulator\r\n      var heterodyne = audioContext.createGain();\r\n      modulatorFilterPostGain.connect(heterodyne);\r\n      heterodyne.gain.value = 0.0; // audio-rate inputs are summed with initial intrinsic value\r\n      heterodyneOscillator.connect(heterodyne.gain);\r\n\r\n      var heterodynePostGain = audioContext.createGain();\r\n      heterodynePostGain.gain.value = 2.0; // GUESS:  boost\r\n      heterodyne.connect(heterodynePostGain);\r\n      heterodynes.push(heterodynePostGain);\r\n\r\n      // Create the rectifier node\r\n      var rectifier = audioContext.createWaveShaper();\r\n      rectifier.curve = rectifierCurve;\r\n      heterodynePostGain.connect(rectifier);\r\n\r\n      // Create the lowpass filter to mask off the difference (near zero)\r\n      var lpFilter = audioContext.createBiquadFilter();\r\n      lpFilter.type = \"lowpass\"; // Lowpass filter\r\n      lpFilter.frequency.value = 5.0; // Guesstimate!  Mask off 20Hz and above.\r\n      lpFilter.Q.value = 1; // don't need a peak\r\n      lpFilters.push(lpFilter);\r\n      rectifier.connect(lpFilter);\r\n\r\n      var lpFilterPostGain = audioContext.createGain();\r\n      lpFilterPostGain.gain.value = 1.0;\r\n      lpFilter.connect(lpFilterPostGain);\r\n      lpFilterPostGains.push(lpFilterPostGain);\r\n\r\n      var waveshaper = audioContext.createWaveShaper();\r\n      waveshaper.curve = waveShaperCurve;\r\n      lpFilterPostGain.connect(waveshaper);\r\n\r\n      // Create the bandpass filter in the carrier chain\r\n      var carrierFilter = audioContext.createBiquadFilter();\r\n      carrierFilter.type = \"bandpass\";\r\n      carrierFilter.frequency.value = vocoderBands[i].frequency;\r\n      carrierFilter.Q.value = FILTER_QUALITY;\r\n      carrierBands.push(carrierFilter);\r\n      carrierInput.connect(carrierFilter);\r\n\r\n      // We want our carrier filters to be 4th-order filter too.\r\n      var secondCarrierFilter = audioContext.createBiquadFilter();\r\n      secondCarrierFilter.type = \"bandpass\"; // Bandpass filter\r\n      secondCarrierFilter.frequency.value = vocoderBands[i].frequency;\r\n      secondCarrierFilter.Q.value = FILTER_QUALITY; //  initial quality\r\n      carrierFilter.chainedFilter = secondCarrierFilter;\r\n      carrierFilter.connect(secondCarrierFilter);\r\n\r\n      var carrierFilterPostGain = audioContext.createGain();\r\n      carrierFilterPostGain.gain.value = 10.0;\r\n      secondCarrierFilter.connect(carrierFilterPostGain);\r\n      carrierFilterPostGains.push(carrierFilterPostGain);\r\n\r\n      // Create the carrier band gain node\r\n      var bandGain = audioContext.createGain();\r\n      carrierBandGains.push(bandGain);\r\n      carrierFilterPostGain.connect(bandGain);\r\n      bandGain.gain.value = 0.0; // audio-rate inputs are summed with initial intrinsic value\r\n      waveshaper.connect(bandGain.gain); // connect the lp controller\r\n\r\n      bandGain.connect(outputGain);\r\n    }\r\n\r\n    // Now set up our wavetable stuff.\r\n    var real = new Float32Array(FOURIER_SIZE);\r\n    var imag = new Float32Array(FOURIER_SIZE);\r\n    real[0] = 0.0;\r\n    imag[0] = 0.0;\r\n    for (var i = 1; i < FOURIER_SIZE; i++) {\r\n      real[i] = 1.0;\r\n      imag[i] = 1.0;\r\n    }\r\n\r\n    wavetable = audioContext.createPeriodicWave\r\n      ? audioContext.createPeriodicWave(real, imag)\r\n      : audioContext.createWaveTable(real, imag);\r\n    loadNoiseBuffer();\r\n  }\r\n\r\n  function setupVocoderGraph() {\r\n    initBandpassFilters();\r\n  }\r\n\r\n  function createCarriersAndPlay(output) {\r\n    carrierSampleNode = audioContext.createBufferSource();\r\n    carrierSampleNode.buffer = carrierBuffer;\r\n    carrierSampleNode.loop = true;\r\n\r\n    carrierSampleGain = audioContext.createGain();\r\n    carrierSampleGain.gain.value = carrierSampleGainValue;\r\n    carrierSampleNode.connect(carrierSampleGain);\r\n    carrierSampleGain.connect(output);\r\n\r\n    // The wavetable signal needs a boost.\r\n    wavetableSignalGain = audioContext.createGain();\r\n\r\n    oscillatorNode = audioContext.createOscillator();\r\n    if (oscillatorType == 4) {\r\n      // wavetable\r\n      oscillatorNode.setPeriodicWave\r\n        ? oscillatorNode.setPeriodicWave(wavetable)\r\n        : oscillatorNode.setWaveTable(wavetable);\r\n      wavetableSignalGain.gain.value = WAVETABLEBOOST;\r\n    } else {\r\n      oscillatorNode.type = oscillatorType;\r\n      wavetableSignalGain.gain.value = SAWTOOTHBOOST;\r\n    }\r\n    oscillatorNode.frequency.value = 110;\r\n    oscillatorNode.detune.value = oscillatorDetuneValue;\r\n    oscillatorNode.connect(wavetableSignalGain);\r\n\r\n    oscillatorGain = audioContext.createGain();\r\n    oscillatorGain.gain.value = oscillatorGainValue;\r\n\r\n    wavetableSignalGain.connect(oscillatorGain);\r\n    oscillatorGain.connect(output);\r\n\r\n    noiseNode = audioContext.createBufferSource();\r\n    noiseNode.buffer = noiseBuffer;\r\n    noiseNode.loop = true;\r\n    noiseGain = audioContext.createGain();\r\n    noiseGain.gain.value = noiseGainValue;\r\n    noiseNode.connect(noiseGain);\r\n\r\n    noiseGain.connect(output);\r\n    oscillatorNode.start(0);\r\n    noiseNode.start(0);\r\n    carrierSampleNode.start(0);\r\n  }\r\n\r\n  function vocode() {\r\n    if (vocoding) {\r\n      if (modulatorNode) {\r\n        modulatorNode.stop(0);\r\n      }\r\n      shutOffCarrier();\r\n      vocoding = false;\r\n      return;\r\n    }\r\n\r\n    createCarriersAndPlay(carrierInput);\r\n\r\n    vocoding = true;\r\n\r\n    modulatorNode = audioContext.createBufferSource();\r\n    modulatorNode.buffer = modulatorBuffer;\r\n    modulatorGain = audioContext.createGain();\r\n    modulatorGain.gain.value = modulatorGainValue;\r\n    modulatorNode.connect(modulatorGain);\r\n    modulatorGain.connect(modulatorInput);\r\n    modulatorNode.start(0);\r\n  }\r\n\r\n  // Initialization function for the page.\r\n  function init(ctx, carrierB, modulatorB) {\r\n    audioContext = ctx;\r\n    carrierBuffer = carrierB;\r\n    modulatorBuffer = modulatorB;\r\n    generateVocoderBands(55, 7040, 28);\r\n    // Set up the vocoder chains\r\n    setupVocoderGraph();\r\n    vocode();\r\n  }\r\n\r\n  // kick out the jams\r\n  init(ctx, cb, mb);\r\n\r\n  return {\r\n    output: finalOutput,\r\n    modulatorNode: modulatorNode,\r\n    modulatorGain: modulatorGain,\r\n    synthLevel: oscillatorGain,\r\n    noiseNode: noiseGain,\r\n    oscillatorNode: oscillatorNode,\r\n  };\r\n}\r\n\r\nexport default vocoder;\r\n","import vocoder from \"../helpers/vocoder\";\nasync function deepSynthTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let carrier = await ctx.decodeAudioData(\n    await (await fetch(\"/audio/junky-vocoder-modulator.ogg\")).arrayBuffer()\n  );\n\n  let compressor = ctx.createDynamicsCompressor();\n\n  let v = vocoder(ctx, carrier, audioBuffer, {\n    noise: 1.64,\n    synthDetune: 600,\n    sample: 1,\n    synth: 2,\n    modulatorGain: 0.4,\n  });\n\n  v.output.connect(compressor);\n  compressor.connect(ctx.destination);\n\n  return await ctx.startRendering();\n}\n\nexport default deepSynthTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\r\nasync function distopianPASpeakerTransform(\r\n  audioBuffer,\r\n  distortionAmount = 100\r\n) {\r\n  let ctx = new OfflineAudioContext(\r\n    audioBuffer.numberOfChannels,\r\n    audioBuffer.length,\r\n    audioBuffer.sampleRate\r\n  );\r\n\r\n  // Source\r\n  let source = ctx.createBufferSource();\r\n  source.buffer = audioBuffer;\r\n\r\n  // Wave shaper\r\n  let waveShaper = ctx.createWaveShaper();\r\n  waveShaper.curve = makeDistortionCurve(distortionAmount);\r\n  function makeDistortionCurve(amount) {\r\n    var k = typeof amount === \"number\" ? amount : 50;\r\n    var n_samples = 44100;\r\n    var curve = new Float32Array(n_samples);\r\n    var deg = Math.PI / 180;\r\n    var x;\r\n    for (let i = 0; i < n_samples; ++i) {\r\n      x = (i * 2) / n_samples - 1;\r\n      curve[i] = ((3 + k) * x * 20 * deg) / (Math.PI + k * Math.abs(x));\r\n    }\r\n    return curve;\r\n  }\r\n\r\n  // Reverb\r\n  let convolver = ctx.createConvolver();\r\n  convolver.buffer = await ctx.decodeAudioData(\r\n    await (\r\n      await fetch(\"/audio/impulse-responses/voxengo/Parking Garage.wav\")\r\n    ).arrayBuffer()\r\n  );\r\n  // convolver.buffer = await ctx.decodeAudioData(await (await fetch(\"../audio/impulse-responses/church.wav\")).arrayBuffer());\r\n\r\n  // Filter\r\n  let filter = ctx.createBiquadFilter();\r\n  filter.type = \"lowpass\";\r\n  filter.frequency.value = 1300;\r\n\r\n  // Create graph\r\n  // source.connect(convolver);\r\n  source.connect(filter);\r\n  filter.connect(convolver);\r\n  convolver.connect(waveShaper);\r\n  waveShaper.connect(ctx.destination);\r\n\r\n  // Render\r\n  source.start();\r\n  let outputAudioBuffer = await ctx.startRendering();\r\n  return outputAudioBuffer;\r\n}\r\n\r\nexport default distopianPASpeakerTransform;\r\n","import vocoder from \"../helpers/vocoder\";\nimport Jungle from \"../helpers/jungle\";\nasync function evilRobotTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let carrier = await ctx.decodeAudioData(\n    await (await fetch(\"/audio/junky-vocoder-modulator.ogg\")).arrayBuffer()\n  );\n\n  let compressor = ctx.createDynamicsCompressor();\n\n  let v = vocoder(ctx, carrier, audioBuffer, {\n    noise: 1.64,\n    synthDetune: 600,\n    sample: 1,\n    synth: 2,\n    modulatorGain: 0.4,\n  });\n\n  //v.output.connect(compressor);\n\n  let pitchChangeEffect = new Jungle(ctx);\n\n  v.output.connect(pitchChangeEffect.input);\n  pitchChangeEffect.output.connect(compressor);\n  pitchChangeEffect.setPitchOffset(-0.4);\n\n  compressor.connect(ctx.destination);\n\n  return await ctx.startRendering();\n}\nexport default evilRobotTransform;\n","import doWorkerTask from \"../helpers/waveWorker\";\nasync function jumbledUpTransform(audioBuffer) {\n  let channels = [];\n  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n    channels[i] = new Float32Array(audioBuffer.getChannelData(i));\n  }\n\n  // Run worker\n  let outputChannels = await doWorkerTask(\n    function () {\n      global.onmessage = function (e) {\n        function shuffleArray(arr) {\n          let m = arr.length,\n            i;\n          while (m) {\n            i = Math.floor(Math.random() * m--); // swap `m` with a random index `i` that hasn't had a go yet\n            [arr[m], arr[i]] = [arr[i], arr[m]];\n          }\n          return arr;\n        }\n\n        let inputChannels = e.data.channels;\n        let sampleRate = e.data.sampleRate;\n        let secondsPerChunk = 2;\n        let samplesPerChunk = secondsPerChunk * sampleRate;\n\n        let outputChannels = [];\n        for (let i = 0; i < inputChannels.length; i++) {\n          // split up this channel into chunks:\n          let input = inputChannels[i];\n          let chunks = [];\n          let currentChunk = [];\n          let inChunkIndex = 0;\n          for (let j = 0; j < input.length; j++) {\n            if (inChunkIndex === samplesPerChunk) {\n              inChunkIndex = 0;\n              chunks.push(currentChunk);\n              currentChunk = [];\n            }\n            currentChunk[inChunkIndex] = input[j];\n            inChunkIndex++;\n            if (j === input.length - 1) {\n              chunks.push(currentChunk);\n            }\n          }\n\n          // shuffle the chunks\n          shuffleArray(chunks);\n\n          // join the chunks\n          let output = new Float32Array(input.length);\n          let m = 0;\n          for (let j = 0; j < chunks.length; j++) {\n            for (let k = 0; k < chunks[j].length; k++) {\n              output[m] = chunks[j][k];\n              m++;\n            }\n          }\n\n          outputChannels.push(output);\n        }\n\n        global.postMessage(outputChannels, [\n          ...outputChannels.map((c) => c.buffer),\n          ...inputChannels.map((c) => c.buffer),\n        ]);\n        global.close();\n      };\n    },\n    { channels, sampleRate: audioBuffer.sampleRate },\n    channels.map((c) => c.buffer)\n  );\n\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n\n  let outputAudioBuffer = ctx.createBuffer(\n    outputChannels.length,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n  for (let i = 0; i < outputChannels.length; i++) {\n    outputAudioBuffer.copyToChannel(outputChannels[i], i);\n  }\n\n  return outputAudioBuffer;\n}\n\nexport default jumbledUpTransform;\n","async function megaphoneTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wave shaper\n  let waveShaper = ctx.createWaveShaper();\n  waveShaper.curve = makeDistortionCurve(30);\n  function makeDistortionCurve(amount) {\n    var k = typeof amount === \"number\" ? amount : 50;\n    var n_samples = 44100;\n    var curve = new Float32Array(n_samples);\n    var deg = Math.PI / 180;\n    var x;\n    for (let i = 0; i < n_samples; ++i) {\n      x = (i * 2) / n_samples - 1;\n      curve[i] = ((3 + k) * x * 20 * deg) / (Math.PI + k * Math.abs(x));\n    }\n    return curve;\n  }\n\n  let lpf1 = ctx.createBiquadFilter();\n  lpf1.type = \"lowpass\";\n  lpf1.frequency.value = 2000.0;\n  let lpf2 = ctx.createBiquadFilter();\n  lpf2.type = \"lowpass\";\n  lpf2.frequency.value = 2000.0;\n  let hpf1 = ctx.createBiquadFilter();\n  hpf1.type = \"highpass\";\n  hpf1.frequency.value = 500.0;\n  let hpf2 = ctx.createBiquadFilter();\n  hpf2.type = \"highpass\";\n  hpf2.frequency.value = 500.0;\n  let compressor = ctx.createDynamicsCompressor();\n  lpf1.connect(lpf2);\n  lpf2.connect(hpf1);\n  hpf1.connect(hpf2);\n  hpf2.connect(waveShaper);\n  waveShaper.connect(compressor);\n  compressor.connect(ctx.destination);\n\n  source.connect(lpf1);\n\n  source.start(0);\n  return await ctx.startRendering();\n}\n\nexport default megaphoneTransform;\n","import Jungle from \"../helpers/jungle\";\nasync function mosquitoTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  let pitchChangeEffect = new Jungle(ctx);\n\n  let compressor = ctx.createDynamicsCompressor();\n\n  source.connect(pitchChangeEffect.input);\n  pitchChangeEffect.output.connect(compressor);\n  pitchChangeEffect.setPitchOffset(5);\n\n  compressor.connect(ctx.destination);\n  //filter.connect(ctx.destination);\n\n  source.start(0);\n  return await ctx.startRendering();\n}\nexport default mosquitoTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function oldRadioTransform(audioBuffer, distortionAmount = 100) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Source\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wave shaper\n  let waveShaper = ctx.createWaveShaper();\n  waveShaper.curve = makeDistortionCurve(distortionAmount);\n  function makeDistortionCurve(amount) {\n    var k = typeof amount === \"number\" ? amount : 50;\n    var n_samples = 44100;\n    var curve = new Float32Array(n_samples);\n    var deg = Math.PI / 180;\n    var x;\n    for (let i = 0; i < n_samples; ++i) {\n      x = (i * 2) / n_samples - 1;\n      curve[i] = ((3 + k) * x * 20 * deg) / (Math.PI + k * Math.abs(x));\n    }\n    return curve;\n  }\n\n  // Reverb\n  let convolver = ctx.createConvolver();\n  convolver.buffer = await ctx.decodeAudioData(\n    await (\n      await fetch(\"/audio/impulse-responses/portable-radio.wav\")\n    ).arrayBuffer()\n  );\n\n  // Wobble\n  let oscillator = ctx.createOscillator();\n  oscillator.frequency.value = 0.2;\n  oscillator.type = \"sine\";\n  // ---\n  let oscillatorGain = ctx.createGain();\n  oscillatorGain.gain.value = 0.001;\n  // ---\n  let delay = ctx.createDelay();\n  delay.delayTime.value = 0.01;\n\n  // White noise\n  let noise = ctx.createBufferSource();\n  let noiseBuffer = ctx.createBuffer(1, 32768, ctx.sampleRate);\n  let noiseData = noiseBuffer.getChannelData(0);\n  for (var i = 0; i < 32768; i += 3) {\n    noiseData[i] = Math.random() * 2; //*Math.random()*Math.random()*Math.random()*Math.random()*Math.random()*0.4;\n    noiseData[i + 1] = noiseData[i];\n    noiseData[i + 2] = noiseData[i];\n  }\n  noise.buffer = noiseBuffer;\n  noise.loop = true;\n  let noiseWobble = ctx.createGain();\n  noiseWobble.gain.value = 1;\n\n  // Create graph\n  oscillator.connect(oscillatorGain);\n  oscillatorGain.connect(delay.delayTime);\n  // ---\n  source.connect(noiseWobble);\n  noiseWobble.connect(delay);\n  delay.connect(convolver);\n  convolver.connect(waveShaper);\n  waveShaper.connect(ctx.destination);\n  // ---\n  noise.connect(noiseWobble.gain);\n\n  // Render\n  oscillator.start(0);\n  noise.start(0);\n  source.start(0);\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\n\nexport default oldRadioTransform;\n","import Tuna from \"tunajs\";\nasync function phaserTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  let tuna = new Tuna(ctx);\n  let effect = new tuna.Phaser({\n    rate: 8, //0.01 to 8 is a decent range, but higher values are possible\n    depth: 0.3, //0 to 1\n    feedback: 0.9, //0 to 1+\n    stereoPhase: 100, //0 to 180\n    baseModulationFrequency: 500, //500 to 1500\n    bypass: 0,\n  });\n  source.connect(effect.input);\n  effect.connect(ctx.destination);\n\n  source.start(0);\n  return await ctx.startRendering();\n}\nexport default phaserTransform;\n","import Jungle from \"../helpers/jungle\";\nasync function pitchTransform(\n  audioBuffer,\n  pitchMod /*nagive=lower, positive=higher*/\n) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  let pitchChangeEffect = new Jungle(ctx);\n\n  let compressor = ctx.createDynamicsCompressor();\n  //let filter = ctx.createBiquadFilter();\n  //filter.type = \"lowpass\";\n  //filter.frequency.value = 10000;\n\n  source.connect(pitchChangeEffect.input);\n  pitchChangeEffect.output.connect(compressor);\n  pitchChangeEffect.setPitchOffset(pitchMod);\n\n  compressor.connect(ctx.destination);\n  //filter.connect(ctx.destination);\n\n  source.start(0);\n  return await ctx.startRendering();\n}\nexport default pitchTransform;\n","import doWorkerTask from \"../helpers/waveWorker\";\nasync function poorTelephoneTransmissionTransform(audioBuffer) {\n  let channels = [];\n  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n    channels[i] = new Float32Array(audioBuffer.getChannelData(i));\n  }\n\n  // Run worker\n  let outputChannels = await doWorkerTask(\n    function () {\n      global.onmessage = function (e) {\n        let inputChannels = e.data.channels;\n        let sampleRate = e.data.sampleRate;\n\n        let outputChannels = [];\n        for (let i = 0; i < inputChannels.length; i++) {\n          let input = inputChannels[i];\n          let output = new Float32Array(input.length);\n\n          // cut input at nodal points\n          let chunks = [];\n          let currentChunk = [];\n          for (let j = 0; j < input.length; j++) {\n            if (\n              (input[j] > 0 && input[j - 1] < 0) ||\n              (input[j] < 0 && input[j - 1] > 0)\n            ) {\n              chunks.push(currentChunk);\n              currentChunk = [];\n            }\n            currentChunk.push(input[j]);\n          }\n\n          // play with chunks\n          for (let j = 0; j < chunks.length; j++) {\n            let chunk = chunks[j];\n            let numberOfPoints = chunk.length;\n            let radiansPerPoint = Math.PI / numberOfPoints;\n            let sign = chunk[0] > 0 ? 1 : -1;\n            if (numberOfPoints < 20) {\n              sign = 0;\n            }\n            for (let p = 0; p < numberOfPoints; p++) {\n              chunk[p] = sign * Math.sin(radiansPerPoint * p);\n            }\n          }\n\n          // join chunks\n          let m = 0;\n          for (let j = 0; j < chunks.length; j++) {\n            for (let k = 0; k < chunks[j].length; k++) {\n              output[m] = chunks[j][k];\n              m++;\n            }\n          }\n\n          outputChannels.push(output);\n        }\n\n        global.postMessage(outputChannels, [\n          ...outputChannels.map((c) => c.buffer),\n          ...inputChannels.map((c) => c.buffer),\n        ]);\n        global.close();\n      };\n    },\n    { channels, sampleRate: audioBuffer.sampleRate },\n    channels.map((c) => c.buffer)\n  );\n\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n\n  audioBuffer = ctx.createBuffer(\n    outputChannels.length,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n  for (let i = 0; i < outputChannels.length; i++) {\n    audioBuffer.copyToChannel(outputChannels[i], i);\n  }\n\n  return audioBuffer;\n\n  // let source = ctx.createBufferSource();\n  // source.buffer = audioBuffer;\n  //\n  //\n  // let compressor = ctx.createDynamicsCompressor();\n  // source.connect(compressor);\n  // compressor.connect(ctx.destination);\n  //\n  // source.start(0);\n  // return await ctx.startRendering();\n}\nexport default poorTelephoneTransmissionTransform;\n","import doWorkerTask from \"../helpers/waveWorker\";\nasync function portableRadioTransform(audioBuffer) {\n  ///////////////////////////////////\n  //    AUDIO GRAPH MANIPULATION   //\n  ///////////////////////////////////\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Source\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wave shaper\n  let waveShaper = ctx.createWaveShaper();\n  waveShaper.curve = makeDistortionCurve(5);\n  function makeDistortionCurve(amount) {\n    var k = typeof amount === \"number\" ? amount : 50;\n    var n_samples = 44100;\n    var curve = new Float32Array(n_samples);\n    var deg = Math.PI / 180;\n    var x;\n    for (let i = 0; i < n_samples; ++i) {\n      x = (i * 2) / n_samples - 1;\n      curve[i] = ((3 + k) * x * 20 * deg) / (Math.PI + k * Math.abs(x));\n    }\n    return curve;\n  }\n\n  // Reverb\n  //let convolver = ctx.createConvolver();\n  //convolver.buffer = await ctx.decodeAudioData(await (await fetch(\"../audio/impulse-responses/tap-thing.mp3\")).arrayBuffer());\n\n  // Wobble\n  let oscillator = ctx.createOscillator();\n  oscillator.frequency.value = 0.2;\n  oscillator.type = \"sine\";\n  // ---\n  let oscillatorGain = ctx.createGain();\n  oscillatorGain.gain.value = 0.001;\n  // ---\n  let delay = ctx.createDelay();\n  delay.delayTime.value = 0.02;\n\n  // Create graph\n  oscillator.connect(oscillatorGain);\n  oscillatorGain.connect(delay.delayTime);\n  // ---\n  source.connect(delay);\n  delay.connect(waveShaper);\n  //convolver.connect(waveShaper);\n  waveShaper.connect(ctx.destination);\n\n  // Render\n  oscillator.start(0);\n  source.start(0);\n  audioBuffer = await ctx.startRendering();\n\n  ////////////////////////////////////\n  //       PCM MANIPULATION         //\n  ////////////////////////////////////\n  let channels = [];\n  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n    channels[i] = new Float32Array(audioBuffer.getChannelData(i));\n  }\n\n  // Run worker\n  let outputChannels = await doWorkerTask(\n    function () {\n      global.onmessage = function (e) {\n        let inputChannels = e.data.channels;\n        let depth = 1;\n        let outputChannels = [];\n        for (let i = 0; i < inputChannels.length; i++) {\n          outputChannels[i] = new Float32Array(inputChannels[i].length);\n          let sample = 0;\n          let samplePeriod = 7;\n          let noise = 0;\n          let squeak = 0;\n          let masterGain = 0.3;\n          let squeakMod = Math.random();\n          for (let j = 0; j < inputChannels[i].length; j++) {\n            if (j % samplePeriod === 0) {\n              sample =\n                (Math.floor(depth * inputChannels[i][j]) / depth +\n                  noise +\n                  squeak) *\n                masterGain;\n            }\n            if (j % 7 === 0) {\n              noise = Math.random() * 0.1;\n            }\n            if (j % 700 === 0) {\n              squeakMod += (Math.random() * 2 - 1) * 0.004;\n            }\n            squeak = Math.sin(j * squeakMod * 1.5) * 0.05;\n            outputChannels[i][j] = sample;\n          }\n        }\n\n        global.postMessage(outputChannels, [\n          ...outputChannels.map((c) => c.buffer),\n          ...inputChannels.map((c) => c.buffer),\n        ]);\n        global.close();\n      };\n    },\n    { channels },\n    channels.map((c) => c.buffer)\n  );\n\n  ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n\n  let outputAudioBuffer = ctx.createBuffer(\n    outputChannels.length,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n  for (let i = 0; i < outputChannels.length; i++) {\n    outputAudioBuffer.copyToChannel(outputChannels[i], i);\n  }\n\n  return outputAudioBuffer;\n}\n\nexport default portableRadioTransform;\n","import Tuna from \"tunajs\";\nasync function radioTuningTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  let compressor1 = ctx.createDynamicsCompressor();\n  let compressor2 = ctx.createDynamicsCompressor();\n  let inputGain = ctx.createGain();\n  inputGain.gain.value = 0.8;\n\n  let tuna = new Tuna(ctx);\n  var effect = new tuna.MoogFilter({\n    cutoff: 0.065, //0 to 1\n    resonance: 3.6, //0 to 4\n    bufferSize: 4096, //256 to 16384\n  });\n\n  source.connect(inputGain);\n  inputGain.connect(effect.input);\n  effect.connect(compressor2);\n  compressor2.connect(ctx.destination);\n\n  source.start(0);\n  return await ctx.startRendering();\n}\n\nexport default radioTuningTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function reverseReverbTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let reversedAudioBuffer = createReversedAudioBuffer(audioBuffer);\n\n  let source = ctx.createBufferSource();\n  source.buffer = reversedAudioBuffer;\n\n  let convolver = ctx.createConvolver();\n  convolver.buffer = await ctx.decodeAudioData(\n    await (\n      await fetch(\"/audio/impulse-responses/voxengo/Parking Garage.wav\")\n    ).arrayBuffer()\n  );\n  // convolver.buffer = await ctx.decodeAudioData(await (await fetch(\"../audio/impulse-responses/church.wav\")).arrayBuffer());\n\n  let outCompressor = ctx.createDynamicsCompressor();\n\n  source.connect(convolver);\n  convolver.connect(outCompressor);\n\n  //dry\n  let dryGain = ctx.createGain();\n  dryGain.gain.value = 0.5;\n  source.connect(dryGain);\n  dryGain.connect(outCompressor);\n  outCompressor.connect(ctx.destination);\n\n  source.start(0);\n  return createReversedAudioBuffer(await ctx.startRendering());\n\n  function createReversedAudioBuffer(audioBuffer) {\n    let ctx = new AudioContext();\n    // copy audiobuffer\n    let reversedAudioBuffer = ctx.createBuffer(\n      audioBuffer.numberOfChannels,\n      audioBuffer.length,\n      audioBuffer.sampleRate\n    );\n    for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n      reversedAudioBuffer.copyToChannel(audioBuffer.getChannelData(i), i);\n    }\n\n    // reverse new audiobuffer\n    for (let i = 0; i < reversedAudioBuffer.numberOfChannels; i++) {\n      reversedAudioBuffer.getChannelData(i).reverse();\n    }\n    return reversedAudioBuffer;\n  }\n}\n\nexport default reverseReverbTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function ringModulatorTransform(audioBuffer) {\n  // This code was adapted from: https://raw.githubusercontent.com/alemangui/pizzicato/0.3.2/distr/Pizzicato.js\n  // Which was probably adapted from here: http://webaudio.prototyping.bbc.co.uk/ring-modulator/\n\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Source\n  let inputNode = ctx.createBufferSource();\n  inputNode.buffer = audioBuffer;\n\n  let outputNode = ctx.createGain();\n  let dryGainNode = ctx.createGain();\n  let wetGainNode = ctx.createGain();\n\n  // `vIn` is the modulation oscillator input\n  // `vc` is the audio input.\n  let vIn = ctx.createOscillator();\n  vIn.frequency.value = 30;\n  vIn.start(0);\n\n  let vInGain = ctx.createGain();\n  vInGain.gain.value = 0.5;\n\n  let vInInverter1 = ctx.createGain();\n  vInInverter1.gain.value = -1;\n\n  let vInInverter2 = ctx.createGain();\n  vInInverter2.gain.value = -1;\n\n  let vInDiode1 = new DiodeNode(ctx);\n  let vInDiode2 = new DiodeNode(ctx);\n\n  let vInInverter3 = ctx.createGain();\n  vInInverter3.gain.value = -1;\n\n  let vcInverter1 = ctx.createGain();\n  vcInverter1.gain.value = -1;\n\n  let vcDiode3 = new DiodeNode(ctx);\n  let vcDiode4 = new DiodeNode(ctx);\n\n  let outGain = ctx.createGain();\n  outGain.gain.value = 1;\n\n  let compressor = ctx.createDynamicsCompressor();\n  compressor.threshold.value = -24;\n  compressor.ratio.value = 16;\n\n  // dry mix\n  inputNode.connect(dryGainNode);\n  dryGainNode.connect(ctx.destination);\n  dryGainNode.gain.value = 0; // disabled\n\n  // wet mix\n  inputNode.connect(vcInverter1);\n  inputNode.connect(vcDiode4.node);\n\n  vcInverter1.connect(vcDiode3.node);\n\n  vIn.connect(vInGain);\n  vInGain.connect(vInInverter1);\n  vInGain.connect(vcInverter1);\n  vInGain.connect(vcDiode4.node);\n\n  vInInverter1.connect(vInInverter2);\n  vInInverter1.connect(vInDiode2.node);\n  vInInverter2.connect(vInDiode1.node);\n\n  vInDiode1.connect(vInInverter3);\n  vInDiode2.connect(vInInverter3);\n\n  vInInverter3.connect(compressor);\n  vcDiode3.connect(compressor);\n  vcDiode4.connect(compressor);\n\n  compressor.connect(outGain);\n  outGain.connect(wetGainNode);\n\n  // line out\n  wetGainNode.connect(ctx.destination);\n\n  // Render\n  inputNode.start();\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\n\nlet DiodeNode = function (context_) {\n  this.context = context_;\n  this.node = this.context.createWaveShaper();\n  this.vb = 0.2;\n  this.vl = 0.4;\n  this.h = 1;\n  this.setCurve();\n};\n\nDiodeNode.prototype.setDistortion = function (distortion) {\n  this.h = distortion;\n  return this.setCurve();\n};\n\nDiodeNode.prototype.setCurve = function () {\n  var i, samples, v, value, wsCurve, _i, _ref, retVal;\n\n  samples = 1024;\n  wsCurve = new Float32Array(samples);\n\n  for (\n    i = _i = 0, _ref = wsCurve.length;\n    0 <= _ref ? _i < _ref : _i > _ref;\n    i = 0 <= _ref ? ++_i : --_i\n  ) {\n    v = (i - samples / 2) / (samples / 2);\n    v = Math.abs(v);\n    if (v <= this.vb) {\n      value = 0;\n    } else if (this.vb < v && v <= this.vl) {\n      value = this.h * (Math.pow(v - this.vb, 2) / (2 * this.vl - 2 * this.vb));\n    } else {\n      value =\n        this.h * v -\n        this.h * this.vl +\n        this.h * (Math.pow(this.vl - this.vb, 2) / (2 * this.vl - 2 * this.vb));\n    }\n    wsCurve[i] = value;\n  }\n\n  retVal = this.node.curve = wsCurve;\n  return retVal;\n};\n\nDiodeNode.prototype.connect = function (destination) {\n  return this.node.connect(destination);\n};\n\nexport default ringModulatorTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function vibratoTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Input\n  let inputNode = ctx.createBufferSource();\n  inputNode.buffer = audioBuffer;\n\n  // Delay\n  let delayNode = ctx.createDelay();\n  delayNode.delayTime.value = 0.03;\n  // cdelay = delayNode;\n\n  let osc = ctx.createOscillator();\n  let gain = ctx.createGain();\n  let wetGain = ctx.createGain();\n\n  gain.gain.value = 0.002; // depth of change to the delay:\n  // cdepth = gain;\n\n  osc.type = \"sine\";\n  osc.frequency.value = 4.5;\n  // cspeed = osc;\n\n  osc.connect(gain);\n  gain.connect(delayNode.delayTime);\n  inputNode.connect(delayNode);\n  delayNode.connect(wetGain);\n  wetGain.connect(ctx.destination);\n\n  osc.start(0);\n  inputNode.start(0);\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\nexport default vibratoTransform;\n","import alien1Transform from \"./alien1\";\r\nimport alien2Transform from \"./alien2\";\r\nimport alienRobot1Transform from \"./alienRobot1\";\r\nimport baneTransform from \"./bane\";\r\nimport chunkedReversedTransform from \"./chunkedReversed\";\r\nimport churchTransform from \"./church\";\r\nimport cymbalTransform from \"./cymbal\";\r\nimport deepSynthTransform from \"./deepSynth\";\r\nimport distopianPASpeakerTransform from \"./distopianPASystem\";\r\nimport evilRobotTransform from \"./evilRobot\";\r\nimport jumbledUpTransform from \"./jumbledUp\";\r\nimport megaphoneTransform from \"./megaphone\";\r\nimport mosquitoTransform from \"./mosquito\";\r\nimport oldRadioTransform from \"./oldRadio\";\r\nimport phaserTransform from \"./phaser\";\r\nimport pitchTransform from \"./pitch\";\r\nimport poorTelephoneTransmissionTransform from \"./poorTelephoneTransmission\";\r\nimport portableRadioTransform from \"./portableRadio\";\r\nimport radioTuningTransform from \"./radioTuning\";\r\nimport reverseReverbTransform from \"./reverseReverb\";\r\nimport ringModulatorTransform from \"./ringModulator\";\r\nimport robot1Transform from \"./robot1\";\r\nimport robot2Transform from \"./robot2\";\r\nimport robot3Transform from \"./robot3\";\r\nimport satanTransform from \"./satan\";\r\nimport sauronTransform from \"./sauron\";\r\nimport slowWobbleTransform from \"./slowWobble\";\r\nimport speedTransform from \"./speed\";\r\nimport synthTransform from \"./synth\";\r\nimport telephoneTransform from \"./telephone\";\r\nimport tinyRobotTransform from \"./tinyRobot\";\r\nimport trollTransform from \"./troll\";\r\nimport underwaterTransform from \"./underwater\";\r\nimport vibratoTransform from \"./vibrato\";\r\n\r\nconst modulationMaps = {\r\n  distopianPASystem: distopianPASpeakerTransform,\r\n  church: churchTransform,\r\n  alien1: alien1Transform,\r\n  alien2: alien2Transform,\r\n  alienRobot1Transform,\r\n  bane: baneTransform,\r\n  chunkedReversed: chunkedReversedTransform,\r\n  cymbal: cymbalTransform,\r\n  deepSynth: deepSynthTransform,\r\n  evilRobot: evilRobotTransform,\r\n  jumbledUp: jumbledUpTransform,\r\n  megaphone: megaphoneTransform,\r\n  mosquito: mosquitoTransform,\r\n  oldRadio: oldRadioTransform,\r\n  phaser: phaserTransform,\r\n  pitch: pitchTransform,\r\n  poorTelephoneTransmission: poorTelephoneTransmissionTransform,\r\n  portableRadio: portableRadioTransform,\r\n  radioTuning: radioTuningTransform,\r\n  reverseReverb: reverseReverbTransform,\r\n  ringModulator: ringModulatorTransform,\r\n  robot1: robot1Transform,\r\n  robot2: robot2Transform,\r\n  robot3: robot3Transform,\r\n  satan: satanTransform,\r\n  sauron: sauronTransform,\r\n  slowWobble: slowWobbleTransform,\r\n  speed: speedTransform,\r\n  synth: synthTransform,\r\n  telephone: telephoneTransform,\r\n  tinyRobot: tinyRobotTransform,\r\n  troll: trollTransform,\r\n  underwater: underwaterTransform,\r\n  vibrato: vibratoTransform,\r\n};\r\n\r\nexport default modulationMaps;\r\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function robot1Transform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Source\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wobble\n  let oscillator1 = ctx.createOscillator();\n  oscillator1.frequency.value = 50;\n  oscillator1.type = \"sawtooth\";\n  let oscillator2 = ctx.createOscillator();\n  oscillator2.frequency.value = 500;\n  oscillator2.type = \"sawtooth\";\n  let oscillator3 = ctx.createOscillator();\n  oscillator3.frequency.value = 50;\n  oscillator3.type = \"sawtooth\";\n  // ---\n  let oscillatorGain = ctx.createGain();\n  oscillatorGain.gain.value = 0.004;\n  // ---\n  let delay = ctx.createDelay();\n  delay.delayTime.value = 0.01;\n\n  // Create graph\n  oscillator1.connect(oscillatorGain);\n  oscillator2.connect(oscillatorGain);\n  // oscillator3.connect(oscillatorGain);\n  oscillatorGain.connect(delay.delayTime);\n  // ---\n  source.connect(delay);\n  delay.connect(ctx.destination);\n\n  // Render\n  oscillator1.start(0);\n  oscillator2.start(0);\n  oscillator3.start(0);\n  source.start(0);\n  // fire.start(0);\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\n\nexport default robot1Transform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function robot2Transform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Source\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wobble\n  let oscillator1 = ctx.createOscillator();\n  oscillator1.frequency.value = 50;\n  oscillator1.type = \"sawtooth\";\n  let oscillator2 = ctx.createOscillator();\n  oscillator2.frequency.value = 1000;\n  oscillator2.type = \"sawtooth\";\n  let oscillator3 = ctx.createOscillator();\n  oscillator3.frequency.value = 50;\n  oscillator3.type = \"sine\";\n  // ---\n  let oscillatorGain = ctx.createGain();\n  oscillatorGain.gain.value = 0.004;\n  // ---\n  let delay = ctx.createDelay();\n  delay.delayTime.value = 0.01;\n\n  // Create graph\n  oscillator1.connect(oscillatorGain);\n  oscillator2.connect(oscillatorGain);\n  oscillator3.connect(oscillatorGain);\n  oscillatorGain.connect(delay.delayTime);\n  // ---\n  source.connect(delay);\n  delay.connect(ctx.destination);\n\n  // Render\n  oscillator1.start(0);\n  oscillator2.start(0);\n  oscillator3.start(0);\n  source.start(0);\n  // fire.start(0);\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\n\nexport default robot2Transform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function robot3Transform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Source\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wobble\n  let oscillator1 = ctx.createOscillator();\n  oscillator1.frequency.value = 700;\n  oscillator1.type = \"triangle\";\n\n  let oscillator2 = ctx.createOscillator();\n  oscillator2.frequency.value = 1000;\n  oscillator2.type = \"sawtooth\";\n  let oscillator3 = ctx.createOscillator();\n  oscillator3.frequency.value = 50;\n  oscillator3.type = \"sine\";\n  // ---\n  let oscillatorGain = ctx.createGain();\n  oscillatorGain.gain.value = 0.004;\n  // ---\n  let delay = ctx.createDelay();\n  delay.delayTime.value = 0.01;\n\n  let filter = ctx.createBiquadFilter();\n  filter.type = \"highpass\";\n  filter.frequency.value = 695;\n\n  // Create graph\n  oscillator1.connect(oscillatorGain);\n  // oscillator2.connect(oscillatorGain);\n  // oscillator3.connect(oscillatorGain);\n  oscillatorGain.connect(delay.delayTime);\n  // ---\n  source.connect(delay);\n  delay.connect(filter);\n  filter.connect(ctx.destination);\n\n  // Render\n  oscillator1.start(0);\n  oscillator2.start(0);\n  oscillator3.start(0);\n  source.start(0);\n  // fire.start(0);\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\n\nexport default robot3Transform;\n","import doWorkerTask from \"../helpers/waveWorker\";\nasync function satanTransform(audioBuffer) {\n  let channels = [];\n  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n    channels[i] = new Float32Array(audioBuffer.getChannelData(i));\n  }\n\n  // Run worker\n  let outputChannels = await doWorkerTask(\n    function () {\n      global.onmessage = function (e) {\n        let inputChannels = e.data.channels;\n        let sampleRate = e.data.sampleRate;\n        let chunkSeconds = 0.01;\n        let chunkSize = chunkSeconds * sampleRate;\n\n        let outputChannels = [];\n        for (let i = 0; i < inputChannels.length; i++) {\n          let input = inputChannels[i];\n\n          // cut input at nodal points\n          let chunks = [];\n          let currentChunk = [];\n          for (let j = 0; j < input.length; j++) {\n            if (currentChunk.length >= chunkSize) {\n              chunks.push(currentChunk);\n              currentChunk = [];\n            }\n            currentChunk.push(input[j]);\n          }\n\n          // play with chunks\n          let outputChunks = [];\n          for (let j = 0; j < chunks.length - 1; j++) {\n            if (j % 2 === 0) {\n              outputChunks.push(chunks[j]);\n            }\n          }\n          chunks = outputChunks;\n\n          // join chunks\n          let output = new Float32Array(\n            chunks.reduce((a, v) => {\n              return a + v.length;\n            }, 0)\n          );\n          let m = 0;\n          for (let j = 0; j < chunks.length; j++) {\n            for (let k = 0; k < chunks[j].length; k++) {\n              output[m] = chunks[j][k];\n              m++;\n            }\n          }\n\n          // resample\n          let resampledOutput = [];\n          let desiredSamplesPerPoint = input.length / output.length;\n          let numSamplesSoFar = 0;\n          for (let j = 0; j < output.length; j++) {\n            // If less than required sample ratio, grab another sample\n            let numPointsSoFar = j + 1;\n            while (numSamplesSoFar / numPointsSoFar < desiredSamplesPerPoint) {\n              resampledOutput.push(output[j]);\n              numSamplesSoFar++;\n            }\n            // resampledOutput.push(output[j]);\n          }\n\n          outputChannels.push(Float32Array.from(resampledOutput));\n        }\n\n        global.postMessage(outputChannels, [\n          ...outputChannels.map((c) => c.buffer),\n          ...inputChannels.map((c) => c.buffer),\n        ]);\n        global.close();\n      };\n    },\n    { channels, sampleRate: audioBuffer.sampleRate },\n    channels.map((c) => c.buffer)\n  );\n\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n\n  audioBuffer = ctx.createBuffer(\n    outputChannels.length,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n  for (let i = 0; i < outputChannels.length; i++) {\n    audioBuffer.copyToChannel(outputChannels[i], i);\n  }\n\n  //return audioBuffer;\n\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  let convolver = ctx.createConvolver();\n  convolver.buffer = await ctx.decodeAudioData(\n    await (\n      await fetch(\"/audio/impulse-responses/voxengo/Parking Garage.wav\")\n    ).arrayBuffer()\n  );\n\n  let compressor = ctx.createDynamicsCompressor();\n\n  let filter = ctx.createBiquadFilter();\n  filter.type = \"lowpass\";\n  filter.frequency.value = 3000;\n\n  source.connect(convolver);\n  convolver.connect(filter);\n\n  // dry\n  source.connect(compressor);\n  compressor.connect(filter);\n\n  filter.connect(ctx.destination);\n\n  source.start(0);\n  return await ctx.startRendering();\n}\n\nexport default satanTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function sauronTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Source\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wobble\n  let oscillator1 = ctx.createOscillator();\n  oscillator1.frequency.value = -10;\n  oscillator1.type = \"sawtooth\";\n\n  let oscillator2 = ctx.createOscillator();\n  oscillator2.frequency.value = 50;\n  oscillator2.type = \"sawtooth\";\n\n  let oscillator3 = ctx.createOscillator();\n  oscillator3.frequency.value = 30;\n  oscillator3.type = \"sawtooth\";\n  // ---\n  let oscillatorGain = ctx.createGain();\n  oscillatorGain.gain.value = 0.007;\n  // ---\n  let oscillatorGain2 = ctx.createGain();\n  oscillatorGain2.gain.value = 0.007;\n  // ---\n  let delay = ctx.createDelay();\n  delay.delayTime.value = 0.01;\n  // ---\n  let delay2 = ctx.createDelay();\n  delay2.delayTime.value = 0.01;\n\n  let filter = ctx.createBiquadFilter();\n  filter.type = \"lowpass\";\n  filter.frequency.value = 2000;\n\n  // Reverb\n  let convolver = ctx.createConvolver();\n  convolver.buffer = await ctx.decodeAudioData(\n    await (\n      await fetch(\"/audio/impulse-responses/voxengo/Parking Garage.wav\")\n    ).arrayBuffer()\n  );\n\n  let compressor = ctx.createDynamicsCompressor();\n  let compressor2 = ctx.createDynamicsCompressor();\n  let compressor3 = ctx.createDynamicsCompressor();\n\n  // Create graph\n  oscillator1.connect(oscillatorGain);\n  oscillator2.connect(oscillatorGain);\n  // oscillator3.connect(oscillatorGain);\n  oscillatorGain.connect(delay.delayTime);\n  // ---\n  source.connect(compressor2);\n  compressor2.connect(delay);\n  delay.connect(compressor3);\n  compressor3.connect(filter);\n  filter.connect(convolver);\n  convolver.connect(ctx.destination);\n\n  oscillator3.connect(oscillatorGain2);\n  oscillatorGain2.connect(delay2.delayTime);\n\n  let noConvGain = ctx.createGain();\n  noConvGain.gain.value = 0.9;\n  filter.connect(noConvGain);\n  noConvGain.connect(ctx.destination);\n\n  // source.connect(compressor)\n  // compressor.connect(delay2);\n  // delay2.connect(filter)\n  // filter.connect(ctx.destination);\n\n  //\n  //filter.connect(ctx.destination);\n  //compressor.connect(ctx.destination);\n\n  // source.connect(delay);\n  // delay.connect(filter);\n  // filter.connect(ctx.destination);\n\n  // Render\n  oscillator1.start(0);\n  oscillator2.start(0);\n  oscillator3.start(0);\n  source.start(0);\n  // fire.start(0);\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\n\nexport default sauronTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function slowWobbleTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  let oscillator = ctx.createOscillator();\n  oscillator.frequency.value = 1;\n  oscillator.type = \"sine\";\n\n  let oscillatorGain = ctx.createGain();\n  oscillatorGain.gain.value = 0.05;\n\n  let delay = ctx.createDelay();\n  delay.delayTime.value = 0.05;\n\n  // source --> delay --> ctx.destination\n  // oscillator --> oscillatorGain --> delay.delayTime --> ctx.destination\n\n  source.connect(delay);\n  delay.connect(ctx.destination);\n\n  oscillator.connect(oscillatorGain);\n  oscillatorGain.connect(delay.delayTime);\n\n  oscillator.start();\n  source.start();\n\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\nexport default slowWobbleTransform;\n","import doWorkerTask from \"../helpers/waveWorker\";\nasync function speedTransform(audioBuffer, speed) {\n  let channels = [];\n  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n    channels[i] = new Float32Array(audioBuffer.getChannelData(i));\n  }\n\n  // Run worker\n  let outputChannels = await doWorkerTask(\n    function () {\n      global.onmessage = function (e) {\n        let inputChannels = e.data.channels;\n        let speed = e.data.speed;\n        let outputChannels = [];\n        for (let i = 0; i < inputChannels.length; i++) {\n          outputChannels[i] = new Float32Array(\n            Math.floor(inputChannels[i].length / speed)\n          );\n          for (let j = 0; j < outputChannels[i].length; j++) {\n            outputChannels[i][j] = inputChannels[i][Math.floor(j * speed)];\n          }\n        }\n\n        global.postMessage(outputChannels, [\n          ...outputChannels.map((c) => c.buffer),\n          ...inputChannels.map((c) => c.buffer),\n        ]);\n        global.close();\n      };\n    },\n    { channels, speed },\n    channels.map((c) => c.buffer)\n  );\n\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n\n  let outputAudioBuffer = ctx.createBuffer(\n    outputChannels.length,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n  for (let i = 0; i < outputChannels.length; i++) {\n    outputAudioBuffer.copyToChannel(outputChannels[i], i);\n  }\n\n  return outputAudioBuffer;\n}\nexport default speedTransform;\n","import vocoder from \"../helpers/vocoder\";\nasync function synthTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let carrier = await ctx.decodeAudioData(\n    await (await fetch(\"/audio/junky-vocoder-modulator.ogg\")).arrayBuffer()\n  );\n\n  let compressor = ctx.createDynamicsCompressor();\n\n  let v = vocoder(ctx, carrier, audioBuffer);\n\n  v.output.connect(compressor);\n  compressor.connect(ctx.destination);\n\n  return await ctx.startRendering();\n}\nexport default synthTransform;\n","async function telephoneTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  let lpf1 = ctx.createBiquadFilter();\n  lpf1.type = \"lowpass\";\n  lpf1.frequency.value = 2000.0;\n  let lpf2 = ctx.createBiquadFilter();\n  lpf2.type = \"lowpass\";\n  lpf2.frequency.value = 2000.0;\n  let hpf1 = ctx.createBiquadFilter();\n  hpf1.type = \"highpass\";\n  hpf1.frequency.value = 500.0;\n  let hpf2 = ctx.createBiquadFilter();\n  hpf2.type = \"highpass\";\n  hpf2.frequency.value = 500.0;\n  let compressor = ctx.createDynamicsCompressor();\n  lpf1.connect(lpf2);\n  lpf2.connect(hpf1);\n  hpf1.connect(hpf2);\n  hpf2.connect(compressor);\n  compressor.connect(ctx.destination);\n\n  source.connect(lpf1);\n\n  source.start(0);\n  return await ctx.startRendering();\n}\nexport default telephoneTransform;\n","import doWorkerTask from \"../helpers/waveWorker\";\nasync function tinyRobotTransform(audioBuffer) {\n  let channels = [];\n  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n    channels[i] = new Float32Array(audioBuffer.getChannelData(i));\n  }\n\n  // Run worker\n  let outputChannels = await doWorkerTask(\n    function () {\n      global.onmessage = function (e) {\n        let inputChannels = e.data.channels;\n        let sampleRate = e.data.sampleRate;\n        let chunkSeconds = 0.05;\n        let chunkSize = chunkSeconds * sampleRate;\n\n        let outputChannels = [];\n        for (let i = 0; i < inputChannels.length; i++) {\n          let input = inputChannels[i];\n\n          // cut input at nodal points\n          let chunks = [];\n          let currentChunk = [];\n          for (let j = 0; j < input.length; j++) {\n            if (currentChunk.length >= chunkSize) {\n              chunks.push(currentChunk);\n              currentChunk = [];\n            }\n            currentChunk.push(input[j]);\n          }\n\n          // play with chunks\n          for (let j = 0; j < chunks.length; j++) {\n            let dup = [...chunks[j]];\n            chunks[j] = [\n              ...dup.reverse(),\n              ...chunks[j],\n              ...dup,\n              ...dup.reverse(),\n            ];\n          }\n\n          // join chunks\n          let output = new Float32Array(\n            chunks.reduce((a, v) => {\n              return a + v.length;\n            }, 0)\n          );\n          let m = 0;\n          for (let j = 0; j < chunks.length; j++) {\n            for (let k = 0; k < chunks[j].length; k++) {\n              output[m] = chunks[j][k];\n              m++;\n            }\n          }\n\n          // resample\n          let resampledOutput = [];\n          let desiredSamplesPerPoint = input.length / output.length;\n          let numSamplesSoFar = 0;\n          for (let j = 0; j < output.length; j++) {\n            // If less than required sample ratio, grab another sample\n            let numPointsSoFar = j + 1;\n            if (numSamplesSoFar / numPointsSoFar < desiredSamplesPerPoint) {\n              resampledOutput.push(output[j]);\n              numSamplesSoFar++;\n            }\n            // resampledOutput.push(output[j]);\n          }\n\n          outputChannels.push(Float32Array.from(resampledOutput));\n        }\n\n        global.postMessage(outputChannels, [\n          ...outputChannels.map((c) => c.buffer),\n          ...inputChannels.map((c) => c.buffer),\n        ]);\n        global.close();\n      };\n    },\n    { channels, sampleRate: audioBuffer.sampleRate },\n    channels.map((c) => c.buffer)\n  );\n\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n\n  audioBuffer = ctx.createBuffer(\n    outputChannels.length,\n    outputChannels[0].length,\n    audioBuffer.sampleRate\n  );\n  for (let i = 0; i < outputChannels.length; i++) {\n    audioBuffer.copyToChannel(outputChannels[i], i);\n  }\n\n  return audioBuffer;\n}\n\nexport default tinyRobotTransform;\n","// self.AudioContext = self.AudioContext || self.webkitAudioContext;\nasync function trollTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  // Source\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  // Wobble\n  let oscillator1 = ctx.createOscillator();\n  oscillator1.frequency.value = -10;\n  oscillator1.type = \"sawtooth\";\n\n  let oscillator2 = ctx.createOscillator();\n  oscillator2.frequency.value = 50;\n  oscillator2.type = \"sawtooth\";\n\n  let oscillator3 = ctx.createOscillator();\n  oscillator3.frequency.value = 30;\n  oscillator3.type = \"sawtooth\";\n  // ---\n  let oscillatorGain = ctx.createGain();\n  oscillatorGain.gain.value = 0.007;\n  // ---\n  let oscillatorGain2 = ctx.createGain();\n  oscillatorGain2.gain.value = 0.007;\n  // ---\n  let delay = ctx.createDelay();\n  delay.delayTime.value = 0.01;\n  // ---\n  let delay2 = ctx.createDelay();\n  delay2.delayTime.value = 0.01;\n\n  let filter = ctx.createBiquadFilter();\n  filter.type = \"lowpass\";\n  filter.frequency.value = 2000;\n\n  let compressor = ctx.createDynamicsCompressor();\n  let compressor2 = ctx.createDynamicsCompressor();\n  let compressor3 = ctx.createDynamicsCompressor();\n  let compressor4 = ctx.createDynamicsCompressor();\n  let compressor5 = ctx.createDynamicsCompressor();\n\n  // Create graph\n  oscillator1.connect(oscillatorGain);\n  oscillator2.connect(oscillatorGain);\n  // oscillator3.connect(oscillatorGain);\n  oscillatorGain.connect(delay.delayTime);\n  // ---\n  source.connect(compressor2);\n  compressor2.connect(delay);\n  delay.connect(compressor3);\n  compressor3.connect(filter);\n  filter.connect(compressor5);\n\n  oscillator3.connect(oscillatorGain2);\n  oscillatorGain2.connect(delay2.delayTime);\n\n  source.connect(compressor);\n  compressor.connect(delay2);\n  delay2.connect(compressor4);\n  compressor4.connect(filter);\n  filter.connect(compressor5);\n\n  compressor5.connect(ctx.destination);\n  //\n  //filter.connect(ctx.destination);\n  //compressor.connect(ctx.destination);\n\n  // source.connect(delay);\n  // delay.connect(filter);\n  // filter.connect(ctx.destination);\n\n  // Render\n  oscillator1.start(0);\n  oscillator2.start(0);\n  oscillator3.start(0);\n  source.start(0);\n  // fire.start(0);\n  let outputAudioBuffer = await ctx.startRendering();\n  return outputAudioBuffer;\n}\n\nexport default trollTransform;\n","import Tuna from \"tunajs\";\nasync function underwaterTransform(audioBuffer) {\n  let ctx = new OfflineAudioContext(\n    audioBuffer.numberOfChannels,\n    audioBuffer.length,\n    audioBuffer.sampleRate\n  );\n\n  let source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n\n  let compressor1 = ctx.createDynamicsCompressor();\n  let compressor2 = ctx.createDynamicsCompressor();\n  let inputGain = ctx.createGain();\n  inputGain.gain.value = 0.5;\n  let filter = ctx.createBiquadFilter();\n  filter.type = \"lowpass\";\n  filter.frequency.value = 500;\n\n  let underwater = ctx.createBufferSource();\n  underwater.buffer = await ctx.decodeAudioData(\n    await (await fetch(\"../audio/backgrounds/underwater1.mp3\")).arrayBuffer()\n  );\n  underwater.loop = true;\n  let underwaterGain = ctx.createGain();\n  underwaterGain.gain.value = 0.3;\n\n  let tuna = new Tuna(ctx);\n  var effect = new tuna.WahWah({\n    automode: true, //true/false\n    baseFrequency: 0.02, //0 to 1\n    excursionOctaves: 1, //1 to 6\n    sweep: 0.2, //0 to 1\n    resonance: 10, //1 to 100\n    sensitivity: 0.5, //-1 to 1\n    bypass: 0,\n  });\n\n  source.connect(inputGain);\n  inputGain.connect(effect.input);\n  effect.connect(filter);\n  filter.connect(compressor2);\n  compressor2.connect(ctx.destination);\n\n  underwater.connect(underwaterGain);\n  underwaterGain.connect(compressor2);\n\n  source.start(0);\n  underwater.start(0);\n  return await ctx.startRendering();\n}\nexport default underwaterTransform;\n","// import React from \"react\";\r\nimport audioBufferToWaveBlob from \"./helpers/audioBufferToWaveBlob\";\r\nimport modulationMaps from \"./modulations/ModulationMap\";\r\nconst VoiceModulation = () => {\r\n  return <div>Lalalalalallalalalalla</div>;\r\n};\r\n\r\nconst useVoiceModulation = (currentSong, setCurrentSong, transformName) => {\r\n  const transformFunc = modulationMaps[transformName];\r\n  const changeVoice = async () => {\r\n    console.log(currentSong.url);\r\n    if (currentSong) {\r\n      const arrayBuffer = await (await fetch(currentSong?.url)).arrayBuffer();\r\n      let ctx = new AudioContext();\r\n      const audioBuffer = await ctx.decodeAudioData(arrayBuffer);\r\n      let outputAudioBuffer = await transformFunc(audioBuffer);\r\n      let outputWavBlob = await audioBufferToWaveBlob(outputAudioBuffer);\r\n      let audioUrl = window.URL.createObjectURL(outputWavBlob);\r\n      console.log(currentSong.url);\r\n      setCurrentSong({\r\n        id: Math.floor(Math.random() * 100),\r\n        title: `${currentSong.title} Modified`,\r\n        description: \"Original Soundtrack\",\r\n        artist: currentSong.artist,\r\n        image: currentSong.image,\r\n        type: currentSong.type,\r\n        url: audioUrl,\r\n      });\r\n    }\r\n  };\r\n  return changeVoice;\r\n};\r\n\r\nexport default VoiceModulation;\r\nexport { useVoiceModulation };\r\n","import modulationMaps from \"./ModulationMap\";\r\nconst logList = () => {\r\n  const list = [];\r\n  for (const key in modulationMaps) {\r\n    list.push(key);\r\n  }\r\n  console.log(list);\r\n};\r\nexport default logList;\r\n","import VoiceModulation, {\n  useVoiceModulation,\n} from \"./components/VoiceModulation\";\nimport logList from \"./components/modulations/VoiceModulationList\";\nlogList();\nexport { VoiceModulation, logList, useVoiceModulation };\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__156__","f","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","jsx","userContext","userInstance","pipe","param","val","value","Super","create","activate","writable","doActivate","this","input","disconnect","connect","activateNode","activateCallback","output","bypass","get","_bypass","set","_lastBypassValue","target","connectInOrder","nodeArray","length","console","error","getDefaults","result","defaults","automate","property","duration","startTime","method","start","currentTime","dur","_is","automatable","cancelScheduledValues","setValueAtTime","name","FLOAT","BOOLEAN","INT","Tuna","context","_window","window","AudioContext","webkitAudioContext","log","Error","__connectified__","gain","createGain","proto","getPrototypeOf","oconnect","shimConnect","node","arguments","isPrototypeOf","apply","connectify","dbToWAVolume","db","Math","max","round","pow","fmod","x","y","tmp","tmp2","pY","l2","toExponential","match","parseInt","toFixed","parseFloat","sign","abs","tanh","exp","initValue","userVal","defaultVal","undefined","Bitcrusher","properties","bufferSize","processor","createScriptProcessor","step","phaser","last","onaudioprocess","inputBuffer","getChannelData","outputBuffer","bits","normfreq","floor","min","enumerable","Cabinet","convolver","newConvolver","impulsePath","makeupNode","makeupGain","setTargetAtTime","Convolver","impulse","dryLevel","wetLevel","Chorus","attenuator","splitter","createChannelSplitter","delayL","createDelay","delayR","feedbackGainNodeLR","feedbackGainNodeRL","merger","createChannelMerger","lfoL","LFO","delayTime","callback","lfoR","feedback","rate","delay","depth","phase","PI","_delay","offset","_depth","oscillation","_feedback","_rate","frequency","Compressor","compNode","createDynamicsCompressor","automakeup","computeMakeup","threshold","release","attack","ratio","knee","_automakeup","createConvolver","dry","filterLow","createBiquadFilter","filterHigh","wet","highCut","lowCut","level","buffer","xhr","XMLHttpRequest","open","responseType","onreadystatechange","readyState","status","decodeAudioData","response","send","Delay","filter","feedbackNode","cutoff","Filter","Q","resonance","filterType","Gain","gainNode","MoogFilter","in1","in2","in3","in4","out1","out2","out3","out4","fb","inputFactor","Overdrive","inputDrive","waveshaper","createWaveShaper","outputDrive","ws_table","Float32Array","k_nSamples","drive","outputGain","curveAmount","algorithmIndex","scaled","_curveAmount","_algorithmIndex","waveshaperAlgorithms","curve","_outputGain","amount","n_samples","abx","Panner","panner","createStereoPanner","pan","Phaser","filtersL","filtersR","feedbackGainNodeL","feedbackGainNodeR","filteredSignal","stage","baseModulationFrequency","stereoPhase","filters","_baseModulationFrequency","_stereoPhase","newPhase","_phase","PingPongDelay","stereoToMonoMix","feedbackLevel","delayLeft","delayRight","delayTimeLeft","delayTimeRight","_delayTimeLeft","_delayTimeRight","Tremolo","amplitudeL","amplitudeR","intensity","_intensity","WahWah","envelopeFollower","EnvelopeFollower","sweep","filterBp","filterPeaking","init","automode","sensitivity","baseFrequency","excursionOctaves","_automode","filterFreqTimeout","setFilterFreq","_baseFrequency","_excursionFrequency","_sweep","clearTimeout","setTimeout","bind","_sensitivity","sampleRate","_excursionOctaves","_resonance","jsNode","buffersize","attackTime","releaseTime","_envelope","envelope","_attackTime","_attackC","_releaseTime","_releaseC","_callback","_target","activated","destination","returnCompute","instance","event","compute","chan","rms","count","channels","numberOfChannels","sqrt","_frequency","_phaseInc","_offset","_oscillation","that","sin","toString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","o","defineProperty","globalThis","Function","obj","prop","r","toStringTag","async","audioBuffer","Promise","resolve","reject","worker","Worker","onmessage","blob","Blob","data","pcmArrays","push","postMessage","config","ctx","OfflineAudioContext","source","createBufferSource","oscillator","createOscillator","oscillatorGain","startRendering","createDelayTimeBuffer","activeTime","fadeTime","shiftUp","length1","createBuffer","bufferTime","Jungle","mod1","mod2","mod3","mod4","shiftDownBuffer","shiftUpBuffer","loop","mod1Gain","mod2Gain","mod3Gain","mod4Gain","modGain1","modGain2","delay1","delay2","fade1","fade2","fadeBuffer","fadeLength","fadeIndex1","fadeIndex2","createFadeBuffer","mix1","mix2","t","t2","setDelay","setPitchOffset","mult","waveShaper","deg","makeDistortionCurve","deeper","lpf1","lpf2","hpf1","hpf2","compressor","workerFunction","buffers","fnString","replace","workerBlob","workerBlobURL","URL","createObjectURL","outputChannels","doWorkerTask","global","inputChannels","chunkSize","chunks","currentChunk","j","reverse","map","close","copyToChannel","fetch","arrayBuffer","cb","mb","opts","vocoderBands","numVocoderBands","audioContext","modulatorBuffer","carrierBuffer","modulatorNode","vocoding","FILTER_QUALITY","modulatorInput","carrierInput","modulatorGain","modulatorGainValue","noiseBuffer","noiseNode","noiseGain","noiseGainValue","noise","carrierSampleNode","carrierSampleGain","carrierSampleGainValue","sample","oscillatorNode","oscillatorType","oscillatorGainValue","synth","oscillatorDetuneValue","synthDetune","FOURIER_SIZE","wavetable","wavetableSignalGain","WAVETABLEBOOST","SAWTOOTHBOOST","modFilterBands","modFilterPostGains","heterodynes","powers","lpFilters","lpFilterPostGains","carrierBands","carrierFilterPostGains","carrierBandGains","hpFilterGain","finalOutput","initBandpassFilters","Array","waveShaperCurve","n2","hpFilter","rectifierCurve","modulatorFilter","secondModulatorFilter","chainedFilter","modulatorFilterPostGain","heterodyneOscillator","heterodyne","heterodynePostGain","rectifier","lpFilter","lpFilterPostGain","carrierFilter","secondCarrierFilter","carrierFilterPostGain","bandGain","real","imag","createPeriodicWave","createWaveTable","lengthInSamples","bufferData","random","loadNoiseBuffer","vocode","stop","setPeriodicWave","setWaveTable","detune","carrierB","modulatorB","startFreq","endFreq","numBands","centsPerBand","LN2","scale","currentFreq","generateVocoderBands","synthLevel","carrier","vocoder","distortionAmount","v","pitchChangeEffect","shuffleArray","arr","samplesPerChunk","inChunkIndex","outputAudioBuffer","noiseData","noiseWobble","effect","pitchMod","chunk","numberOfPoints","radiansPerPoint","samplePeriod","squeak","masterGain","squeakMod","compressor2","inputGain","reversedAudioBuffer","createReversedAudioBuffer","outCompressor","dryGain","DiodeNode","context_","vb","vl","setCurve","setDistortion","distortion","samples","wsCurve","_i","_ref","distopianPASystem","distopianPASpeakerTransform","church","churchTransform","alien1","alien1Transform","alien2","alien2Transform","alienRobot1Transform","bane","baneTransform","chunkedReversed","chunkedReversedTransform","cymbal","cymbalTransform","deepSynth","deepSynthTransform","evilRobot","evilRobotTransform","jumbledUp","jumbledUpTransform","megaphone","megaphoneTransform","mosquito","mosquitoTransform","oldRadio","oldRadioTransform","phaserTransform","pitch","pitchTransform","poorTelephoneTransmission","poorTelephoneTransmissionTransform","portableRadio","portableRadioTransform","radioTuning","radioTuningTransform","reverseReverb","reverseReverbTransform","ringModulator","inputNode","dryGainNode","wetGainNode","vIn","vInGain","vInInverter1","vInInverter2","vInDiode1","vInDiode2","vInInverter3","vcInverter1","vcDiode3","vcDiode4","outGain","robot1","oscillator1","oscillator2","oscillator3","robot2","robot3","satan","outputChunks","reduce","resampledOutput","desiredSamplesPerPoint","numSamplesSoFar","numPointsSoFar","from","sauron","oscillatorGain2","compressor3","noConvGain","slowWobble","speed","telephone","tinyRobot","dup","troll","compressor4","compressor5","underwater","underwaterGain","vibrato","delayNode","osc","wetGain","useVoiceModulation","currentSong","setCurrentSong","transformName","transformFunc","modulationMaps","url","outputWavBlob","audioBufferToWaveBlob","audioUrl","id","title","concat","description","artist","image","VoiceModulation","_jsx","children","logList","list"],"sourceRoot":""}